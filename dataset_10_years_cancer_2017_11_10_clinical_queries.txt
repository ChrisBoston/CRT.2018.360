/*
	Dataset for all the patients in the ICU for the trend of mortality for patients with cancer
*/

-- ------------------------------------------------------------------
-- Purpose: Create a view of the urine output for each ICUSTAY_ID over the first 24 hours.
-- ------------------------------------------------------------------

DROP MATERIALIZED VIEW IF EXISTS uofirstday CASCADE;
create materialized view uofirstday as
select
  -- patient identifiers
  ie.subject_id, ie.hadm_id, ie.icustay_id

  -- volumes associated with urine output ITEMIDs
  , sum(
      -- we consider input of GU irrigant as a negative volume
      case when oe.itemid = 227489 then -1*VALUE
      else VALUE end
  ) as UrineOutput
from mimiciii.icustays ie
-- Join to the outputevents table to get urine output
left join mimiciii.outputevents oe
-- join on all patient identifiers
on ie.subject_id = oe.subject_id and ie.hadm_id = oe.hadm_id and ie.icustay_id = oe.icustay_id
-- and ensure the data occurs during the first day
and oe.charttime between ie.intime and (ie.intime + interval '1' day) -- first ICU day
where itemid in
(
-- these are the most frequently occurring urine output observations in CareVue
40055, -- "Urine Out Foley"
43175, -- "Urine ."
40069, -- "Urine Out Void"
40094, -- "Urine Out Condom Cath"
40715, -- "Urine Out Suprapubic"
40473, -- "Urine Out IleoConduit"
40085, -- "Urine Out Incontinent"
40057, -- "Urine Out Rt Nephrostomy"
40056, -- "Urine Out Lt Nephrostomy"
40405, -- "Urine Out Other"
40428, -- "Urine Out Straight Cath"
40086,--	Urine Out Incontinent
40096, -- "Urine Out Ureteral Stent #1"
40651, -- "Urine Out Ureteral Stent #2"

-- these are the most frequently occurring urine output observations in CareVue
226559, -- "Foley"
226560, -- "Void"
226561, -- "Condom Cath"
226584, -- "Ileoconduit"
226563, -- "Suprapubic"
226564, -- "R Nephrostomy"
226565, -- "L Nephrostomy"
226567, --	Straight Cath
226557, -- R Ureteral Stent
226558, -- L Ureteral Stent
227488, -- GU Irrigant Volume In
227489  -- GU Irrigant/Urine Volume Out
)
group by ie.subject_id, ie.hadm_id, ie.icustay_id
order by ie.subject_id, ie.hadm_id, ie.icustay_id;


-- Determines if a patient is ventilated on the first day of their ICU stay.
-- Creates a table with the result.

DROP MATERIALIZED VIEW IF EXISTS ventfirstday CASCADE;
CREATE MATERIALIZED VIEW ventfirstday AS
-- group together the flags based on icustay_id
select
  subject_id, hadm_id, icustay_id
  , max(case
      -- if no chart data matched, they are not ventilated
      when value is null
      then 0
      when (VentTypeRecorded + MinuteVolume + TV + InspPressure
        + PlateauPressure + APRVPressure + PEEP + HighPressureRelease
        + PCV + TCPCV + RespPressure + psvlevel + ett + O2FromVentilator) > 0
      then 1
      else 0
      end) as MechVent
from
(
select
  ie.subject_id, ie.icustay_id, ie.hadm_id, ce.charttime
  , ce.itemid, di.label, ce.value
  , case
      when ce.itemid = 720 and value != 'Other/Remarks' then 1
    else 0 end as VentTypeRecorded -- VentType

  , case
      when ce.itemid in (445, 448, 449, 450, 1340, 1486, 1600, 224687) then 1 -- minute volume
    else 0 end as MinuteVolume -- MinuteVolume

  , case
      when ce.itemid in (639, 654, 681, 682, 683, 684,224685,224684,224686) then 1 -- tidal volume
    else 0 end as TV -- TidalVolume

  , case
      when ce.itemid in (218,436,535,444,459,224697,224695,224696,224746,224747) then 1 -- High/Low/Peak/Mean/Neg insp force
    else 0 end as RespPressure
  , case
      when ce.itemid in (221,1,1211,1655,2000,226873,224738,224419,224750,227187) then 1 -- Insp pressure
    else 0 end as InspPressure

  , case
      when ce.itemid in (543) then 1 -- PlateauPressure
    else 0 end as PlateauPressure

  , case
      when ce.itemid in (5865,5866,224707,224709,224705,224706) then 1 -- APRV pressure
    else 0 end as APRVPressure

  , case
      when ce.itemid in (60,437,505,506,686,220339,224700) then 1 -- peep
    else 0 end as PEEP

  , case
      when ce.itemid in (141,224417,224418) then 1 -- cuff volume/pressure
    else 0 end as CuffPressure

  , case
      when ce.itemid in (3459) then 1 -- high pressure relief
    else 0 end as HighPressureRelease

  , case
      when ce.itemid in (501,502,503,224702) then 1 -- PCV
    else 0 end as PCV

  , case
      when ce.itemid in (223,667,668,669,670,671,672) then 1 -- TCPCV
    else 0 end as TCPCV -- TCPCV

  , case
      when ce.itemid = 467 and ce.value = 'Ventilator' then 1 -- O2 delivery device == ventilator
    else 0 end as O2FromVentilator

  , case
      when ce.itemid in (578,3605) then 1 -- Pressure/Respiratory
    else 0 end as PressureSupport -- Pressure/Respiratory

  , case
      when ce.itemid in (3688,3689) then 1 -- Vt [Ventilator] and Vt [Spontaneous] - measured in inches??? :S
    else 0 end as VtInches

  , case
      when ce.itemid in (63,64,65,66,67,68
        ,227579,227580,227582,227581) then 1 -- BIPAP
    else 0 end as BIPAP --

  , case
      when ce.itemid in (157,158,1852,3398,3399,3400,3401,3402,3403,3404,8382
          ,227809,227810) then 1 -- ETT
    else 0 end as ETT --

  , case
      when ce.itemid in (224701) then 1 else 0 end PSVlevel

  , case
      when ce.itemid in (223835) then 1 -- FiO2
    else 0 end as FiO2

  , case
      when ce.itemid in (614,615,619,653,224688,224690,224689) then 1
    else 0 end as RespRate -- RespRate
  , case
      when ce.itemid in (194, 195, 224691) then 1 -- flow by
    else 0 end as FlowBy

  , case
      when ce.itemid in (470,471,223834,227287) then 1 -- O2 FLOW
    else 0 end as O2Flow

  , case
      when ce.itemid = 648 and value = 'Intubated/trach' THEN 1 -- Speech = intubated
    else 0 end as SpeechIntubated

from mimiciii.icustays ie
left join mimiciii.chartevents ce
  on ie.icustay_id = ce.icustay_id 
  and ce.value is not null
  -- exclude rows marked as error
  and ce.error IS DISTINCT FROM 1
  -- only first day of their ICU stay
  and ce.charttime between ie.intime and ie.intime + interval '1' day
left join mimiciii.d_items di
  on ce.itemid = di.itemid
) AS tt
group by subject_id, hadm_id, icustay_id
order by subject_id, hadm_id, icustay_id;


-- This query pivots the vital signs for the first 24 hours of a patient's stay
-- Vital signs include heart rate, blood pressure, respiration rate, and temperature

DROP MATERIALIZED VIEW IF EXISTS vitalsfirstday CASCADE;
create materialized view vitalsfirstday as
SELECT pvt.subject_id, pvt.hadm_id, pvt.icustay_id

-- Easier names
, min(case when VitalID = 1 then valuenum else null end) as HeartRate_Min
, max(case when VitalID = 1 then valuenum else null end) as HeartRate_Max
, avg(case when VitalID = 1 then valuenum else null end) as HeartRate_Mean
, min(case when VitalID = 2 then valuenum else null end) as SysBP_Min
, max(case when VitalID = 2 then valuenum else null end) as SysBP_Max
, avg(case when VitalID = 2 then valuenum else null end) as SysBP_Mean
, min(case when VitalID = 3 then valuenum else null end) as DiasBP_Min
, max(case when VitalID = 3 then valuenum else null end) as DiasBP_Max
, avg(case when VitalID = 3 then valuenum else null end) as DiasBP_Mean
, min(case when VitalID = 4 then valuenum else null end) as MeanBP_Min
, max(case when VitalID = 4 then valuenum else null end) as MeanBP_Max
, avg(case when VitalID = 4 then valuenum else null end) as MeanBP_Mean
, min(case when VitalID = 5 then valuenum else null end) as RespRate_Min
, max(case when VitalID = 5 then valuenum else null end) as RespRate_Max
, avg(case when VitalID = 5 then valuenum else null end) as RespRate_Mean
, min(case when VitalID = 6 then valuenum else null end) as TempC_Min
, max(case when VitalID = 6 then valuenum else null end) as TempC_Max
, avg(case when VitalID = 6 then valuenum else null end) as TempC_Mean
, min(case when VitalID = 7 then valuenum else null end) as SpO2_Min
, max(case when VitalID = 7 then valuenum else null end) as SpO2_Max
, avg(case when VitalID = 7 then valuenum else null end) as SpO2_Mean
, min(case when VitalID = 8 then valuenum else null end) as Glucose_Min
, max(case when VitalID = 8 then valuenum else null end) as Glucose_Max
, avg(case when VitalID = 8 then valuenum else null end) as Glucose_Mean

FROM  (
  select ie.subject_id, ie.hadm_id, ie.icustay_id
  , case
    when itemid in (211,220045) and valuenum > 0 and valuenum < 300 then 1 -- HeartRate
    when itemid in (51,442,455,6701,220179,220050) and valuenum > 0 and valuenum < 400 then 2 -- SysBP
    when itemid in (8368,8440,8441,8555,220180,220051) and valuenum > 0 and valuenum < 300 then 3 -- DiasBP
    when itemid in (456,52,6702,443,220052,220181,225312) and valuenum > 0 and valuenum < 300 then 4 -- MeanBP
    when itemid in (615,618,220210,224690) and valuenum > 0 and valuenum < 70 then 5 -- RespRate
    when itemid in (223761,678) and valuenum > 70 and valuenum < 120  then 6 -- TempF, converted to degC in valuenum call
    when itemid in (223762,676) and valuenum > 10 and valuenum < 50  then 6 -- TempC
    when itemid in (646,220277) and valuenum > 0 and valuenum <= 100 then 7 -- SpO2
    when itemid in (807,811,1529,3745,3744,225664,220621,226537) and valuenum > 0 then 8 -- Glucose

    else null end as VitalID
      -- convert F to C
  , case when itemid in (223761,678) then (valuenum-32)/1.8 else valuenum end as valuenum

  from mimiciii.icustays ie
  left join mimiciii.chartevents ce
  on ie.subject_id = ce.subject_id and ie.hadm_id = ce.hadm_id and ie.icustay_id = ce.icustay_id
  and ce.charttime between ie.intime and ie.intime + interval '1' day
  -- exclude rows marked as error
  and ce.error IS DISTINCT FROM 1
  where ce.itemid in
  (
  -- HEART RATE
  211, --"Heart Rate"
  220045, --"Heart Rate"

  -- Systolic/diastolic

  51, --	Arterial BP [Systolic]
  442, --	Manual BP [Systolic]
  455, --	NBP [Systolic]
  6701, --	Arterial BP #2 [Systolic]
  220179, --	Non Invasive Blood Pressure systolic
  220050, --	Arterial Blood Pressure systolic

  8368, --	Arterial BP [Diastolic]
  8440, --	Manual BP [Diastolic]
  8441, --	NBP [Diastolic]
  8555, --	Arterial BP #2 [Diastolic]
  220180, --	Non Invasive Blood Pressure diastolic
  220051, --	Arterial Blood Pressure diastolic


  -- MEAN ARTERIAL PRESSURE
  456, --"NBP Mean"
  52, --"Arterial BP Mean"
  6702, --	Arterial BP Mean #2
  443, --	Manual BP Mean(calc)
  220052, --"Arterial Blood Pressure mean"
  220181, --"Non Invasive Blood Pressure mean"
  225312, --"ART BP mean"

  -- RESPIRATORY RATE
  618,--	Respiratory Rate
  615,--	Resp Rate (Total)
  220210,--	Respiratory Rate
  224690, --	Respiratory Rate (Total)


  -- SPO2, peripheral
  646, 220277,

  -- GLUCOSE, both lab and fingerstick
  807,--	Fingerstick Glucose
  811,--	Glucose (70-105)
  1529,--	Glucose
  3745,--	BloodGlucose
  3744,--	Blood Glucose
  225664,--	Glucose finger stick
  220621,--	Glucose (serum)
  226537,--	Glucose (whole blood)

  -- TEMPERATURE
  223762, -- "Temperature Celsius"
  676,	-- "Temperature C"
  223761, -- "Temperature Fahrenheit"
  678 --	"Temperature F"

  )
) pvt
group by pvt.subject_id, pvt.hadm_id, pvt.icustay_id
order by pvt.subject_id, pvt.hadm_id, pvt.icustay_id;

commit;


-- ITEMIDs used:

-- CAREVUE
--    723 as GCSVerbal
--    454 as GCSMotor
--    184 as GCSEyes

-- METAVISION
--    223900 GCS - Verbal Response
--    223901 GCS - Motor Response
--    220739 GCS - Eye Opening

-- The code combines the ITEMIDs into the carevue itemids, then pivots those
-- So 223900 is changed to 723, then the ITEMID 723 is pivoted to form GCSVerbal

-- Note:
--  The GCS for sedated patients is defaulted to 15 in this code.
--  This is in line with how the data is meant to be collected.
--  e.g., from the SAPS II publication:
--    For sedated patients, the Glasgow Coma Score before sedation was used.
--    This was ascertained either from interviewing the physician who ordered the sedation,
--    or by reviewing the patient's medical record.

DROP MATERIALIZED VIEW IF EXISTS gcsfirstday CASCADE;
create materialized view gcsfirstday as
with base as
(
  SELECT pvt.ICUSTAY_ID
  , pvt.charttime

  -- Easier names - note we coalesced Metavision and CareVue IDs below
  , max(case when pvt.itemid = 454 then pvt.valuenum else null end) as GCSMotor
  , max(case when pvt.itemid = 723 then pvt.valuenum else null end) as GCSVerbal
  , max(case when pvt.itemid = 184 then pvt.valuenum else null end) as GCSEyes

  -- If verbal was set to 0 in the below select, then this is an intubated patient
  , case
      when max(case when pvt.itemid = 723 then pvt.valuenum else null end) = 0
    then 1
    else 0
    end as EndoTrachFlag

  , ROW_NUMBER ()
          OVER (PARTITION BY pvt.ICUSTAY_ID ORDER BY pvt.charttime ASC) as rn

  FROM  (
  select l.ICUSTAY_ID
  -- merge the ITEMIDs so that the pivot applies to both metavision/carevue data
  , case
      when l.ITEMID in (723,223900) then 723
      when l.ITEMID in (454,223901) then 454
      when l.ITEMID in (184,220739) then 184
      else l.ITEMID end
    as ITEMID

  -- convert the data into a number, reserving a value of 0 for ET/Trach
  , case
      -- endotrach/vent is assigned a value of 0, later parsed specially
      when l.ITEMID = 723 and l.VALUE = '1.0 ET/Trach' then 0 -- carevue
      when l.ITEMID = 223900 and l.VALUE = 'No Response-ETT' then 0 -- metavision

      else VALUENUM
      end
    as VALUENUM
  , l.CHARTTIME
  from mimiciii.CHARTEVENTS l

  -- get intime for charttime subselection
  inner join mimiciii.icustays b
    on l.icustay_id = b.icustay_id

  -- Isolate the desired GCS variables
  where l.ITEMID in
  (
    -- 198 -- GCS
    -- GCS components, CareVue
    184, 454, 723
    -- GCS components, Metavision
    , 223900, 223901, 220739
  )
  -- Only get data for the first 24 hours
  and l.charttime between b.intime and b.intime + interval '1' day
  -- exclude rows marked as error
  and l.error IS DISTINCT FROM 1
  ) pvt
  group by pvt.ICUSTAY_ID, pvt.charttime
)
, gcs as (
  select b.*
  , b2.GCSVerbal as GCSVerbalPrev
  , b2.GCSMotor as GCSMotorPrev
  , b2.GCSEyes as GCSEyesPrev
  -- Calculate GCS, factoring in special case when they are intubated and prev vals
  -- note that the coalesce are used to implement the following if:
  --  if current value exists, use it
  --  if previous value exists, use it
  --  otherwise, default to normal
  , case
      -- replace GCS during sedation with 15
      when b.GCSVerbal = 0
        then 15
      when b.GCSVerbal is null and b2.GCSVerbal = 0
        then 15
      -- if previously they were intub, but they aren't now, do not use previous GCS values
      when b2.GCSVerbal = 0
        then
            coalesce(b.GCSMotor,6)
          + coalesce(b.GCSVerbal,5)
          + coalesce(b.GCSEyes,4)
      -- otherwise, add up score normally, imputing previous value if none available at current time
      else
            coalesce(b.GCSMotor,coalesce(b2.GCSMotor,6))
          + coalesce(b.GCSVerbal,coalesce(b2.GCSVerbal,5))
          + coalesce(b.GCSEyes,coalesce(b2.GCSEyes,4))
      end as GCS

  from base b
  -- join to itself within 6 hours to get previous value
  left join base b2
    on b.ICUSTAY_ID = b2.ICUSTAY_ID and b.rn = b2.rn+1 and b2.charttime > b.charttime - interval '6' hour
)
, gcs_final as (
  select gcs.*
  -- This sorts the data by GCS, so rn=1 is the the lowest GCS values to keep
  , ROW_NUMBER ()
          OVER (PARTITION BY gcs.ICUSTAY_ID
                ORDER BY gcs.GCS
               ) as IsMinGCS
  from gcs
)
select ie.SUBJECT_ID, ie.HADM_ID, ie.ICUSTAY_ID
-- The minimum GCS is determined by the above row partition, we only join if IsMinGCS=1
, GCS as MinGCS
, coalesce(GCSMotor,GCSMotorPrev) as GCSMotor
, coalesce(GCSVerbal,GCSVerbalPrev) as GCSVerbal
, coalesce(GCSEyes,GCSEyesPrev) as GCSEyes
, EndoTrachFlag as EndoTrachFlag

-- subselect down to the cohort of eligible patients
from mimiciii.icustays ie
left join gcs_final gs
  on ie.ICUSTAY_ID = gs.ICUSTAY_ID and gs.IsMinGCS = 1
ORDER BY ie.ICUSTAY_ID;


-- This query pivots lab values taken in the first 24 hours of a patient's stay

-- Have already confirmed that the unit of measurement is always the same: null or the correct unit

DROP MATERIALIZED VIEW IF EXISTS labsfirstday CASCADE;
CREATE materialized VIEW labsfirstday AS
SELECT
  pvt.subject_id, pvt.hadm_id, pvt.icustay_id

  , min(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE null END) as ANIONGAP_min
  , max(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE null END) as ANIONGAP_max
  , min(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE null END) as ALBUMIN_min
  , max(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE null END) as ALBUMIN_max
  , min(CASE WHEN label = 'BANDS' THEN valuenum ELSE null END) as BANDS_min
  , max(CASE WHEN label = 'BANDS' THEN valuenum ELSE null END) as BANDS_max
  , min(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE null END) as BICARBONATE_min
  , max(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE null END) as BICARBONATE_max
  , min(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE null END) as BILIRUBIN_min
  , max(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE null END) as BILIRUBIN_max
  , min(CASE WHEN label = 'CREATININE' THEN valuenum ELSE null END) as CREATININE_min
  , max(CASE WHEN label = 'CREATININE' THEN valuenum ELSE null END) as CREATININE_max
  , min(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE null END) as CHLORIDE_min
  , max(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE null END) as CHLORIDE_max
  , min(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE null END) as GLUCOSE_min
  , max(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE null END) as GLUCOSE_max
  , min(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE null END) as HEMATOCRIT_min
  , max(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE null END) as HEMATOCRIT_max
  , min(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE null END) as HEMOGLOBIN_min
  , max(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE null END) as HEMOGLOBIN_max
  , min(CASE WHEN label = 'LACTATE' THEN valuenum ELSE null END) as LACTATE_min
  , max(CASE WHEN label = 'LACTATE' THEN valuenum ELSE null END) as LACTATE_max
  , min(CASE WHEN label = 'PLATELET' THEN valuenum ELSE null END) as PLATELET_min
  , max(CASE WHEN label = 'PLATELET' THEN valuenum ELSE null END) as PLATELET_max
  , min(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE null END) as POTASSIUM_min
  , max(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE null END) as POTASSIUM_max
  , min(CASE WHEN label = 'PTT' THEN valuenum ELSE null END) as PTT_min
  , max(CASE WHEN label = 'PTT' THEN valuenum ELSE null END) as PTT_max
  , min(CASE WHEN label = 'INR' THEN valuenum ELSE null END) as INR_min
  , max(CASE WHEN label = 'INR' THEN valuenum ELSE null END) as INR_max
  , min(CASE WHEN label = 'PT' THEN valuenum ELSE null END) as PT_min
  , max(CASE WHEN label = 'PT' THEN valuenum ELSE null END) as PT_max
  , min(CASE WHEN label = 'SODIUM' THEN valuenum ELSE null END) as SODIUM_min
  , max(CASE WHEN label = 'SODIUM' THEN valuenum ELSE null end) as SODIUM_max
  , min(CASE WHEN label = 'BUN' THEN valuenum ELSE null end) as BUN_min
  , max(CASE WHEN label = 'BUN' THEN valuenum ELSE null end) as BUN_max
  , min(CASE WHEN label = 'WBC' THEN valuenum ELSE null end) as WBC_min
  , max(CASE WHEN label = 'WBC' THEN valuenum ELSE null end) as WBC_max


FROM
( -- begin query that extracts the data
  SELECT ie.subject_id, ie.hadm_id, ie.icustay_id
  -- here we assign labels to ITEMIDs
  -- this also fuses together multiple ITEMIDs containing the same data
  , CASE
        WHEN itemid = 50868 THEN 'ANION GAP'
        WHEN itemid = 50862 THEN 'ALBUMIN'
        WHEN itemid = 51144 THEN 'BANDS'
        WHEN itemid = 50882 THEN 'BICARBONATE'
        WHEN itemid = 50885 THEN 'BILIRUBIN'
        WHEN itemid = 50912 THEN 'CREATININE'
        WHEN itemid = 50806 THEN 'CHLORIDE'
        WHEN itemid = 50902 THEN 'CHLORIDE'
        WHEN itemid = 50809 THEN 'GLUCOSE'
        WHEN itemid = 50931 THEN 'GLUCOSE'
        WHEN itemid = 50810 THEN 'HEMATOCRIT'
        WHEN itemid = 51221 THEN 'HEMATOCRIT'
        WHEN itemid = 50811 THEN 'HEMOGLOBIN'
        WHEN itemid = 51222 THEN 'HEMOGLOBIN'
        WHEN itemid = 50813 THEN 'LACTATE'
        WHEN itemid = 51265 THEN 'PLATELET'
        WHEN itemid = 50822 THEN 'POTASSIUM'
        WHEN itemid = 50971 THEN 'POTASSIUM'
        WHEN itemid = 51275 THEN 'PTT'
        WHEN itemid = 51237 THEN 'INR'
        WHEN itemid = 51274 THEN 'PT'
        WHEN itemid = 50824 THEN 'SODIUM'
        WHEN itemid = 50983 THEN 'SODIUM'
        WHEN itemid = 51006 THEN 'BUN'
        WHEN itemid = 51300 THEN 'WBC'
        WHEN itemid = 51301 THEN 'WBC'
      ELSE null
    END AS label
  , -- add in some sanity checks on the values
  -- the where clause below requires all valuenum to be > 0, so these are only upper limit checks
    CASE
      WHEN itemid = 50862 and valuenum >    10 THEN null -- g/dL 'ALBUMIN'
      WHEN itemid = 50868 and valuenum > 10000 THEN null -- mEq/L 'ANION GAP'
      WHEN itemid = 51144 and valuenum <     0 THEN null -- immature band forms, %
      WHEN itemid = 51144 and valuenum >   100 THEN null -- immature band forms, %
      WHEN itemid = 50882 and valuenum > 10000 THEN null -- mEq/L 'BICARBONATE'
      WHEN itemid = 50885 and valuenum >   150 THEN null -- mg/dL 'BILIRUBIN'
      WHEN itemid = 50806 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'
      WHEN itemid = 50902 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'
      WHEN itemid = 50912 and valuenum >   150 THEN null -- mg/dL 'CREATININE'
      WHEN itemid = 50809 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'
      WHEN itemid = 50931 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'
      WHEN itemid = 50810 and valuenum >   100 THEN null -- % 'HEMATOCRIT'
      WHEN itemid = 51221 and valuenum >   100 THEN null -- % 'HEMATOCRIT'
      WHEN itemid = 50811 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'
      WHEN itemid = 51222 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'
      WHEN itemid = 50813 and valuenum >    50 THEN null -- mmol/L 'LACTATE'
      WHEN itemid = 51265 and valuenum > 10000 THEN null -- K/uL 'PLATELET'
      WHEN itemid = 50822 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'
      WHEN itemid = 50971 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'
      WHEN itemid = 51275 and valuenum >   150 THEN null -- sec 'PTT'
      WHEN itemid = 51237 and valuenum >    50 THEN null -- 'INR'
      WHEN itemid = 51274 and valuenum >   150 THEN null -- sec 'PT'
      WHEN itemid = 50824 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'
      WHEN itemid = 50983 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'
      WHEN itemid = 51006 and valuenum >   300 THEN null -- 'BUN'
      WHEN itemid = 51300 and valuenum >  1000 THEN null -- 'WBC'
      WHEN itemid = 51301 and valuenum >  1000 THEN null -- 'WBC'
    ELSE le.valuenum
    END AS valuenum

  FROM mimiciii.icustays ie

  LEFT JOIN mimiciii.labevents le
    ON le.subject_id = ie.subject_id AND le.hadm_id = ie.hadm_id
    AND le.charttime BETWEEN (ie.intime - interval '6' hour) AND (ie.intime + interval '1' day)
    AND le.ITEMID in
    (
      -- comment is: LABEL | CATEGORY | FLUID | NUMBER OF ROWS IN LABEVENTS
      50868, -- ANION GAP | CHEMISTRY | BLOOD | 769895
      50862, -- ALBUMIN | CHEMISTRY | BLOOD | 146697
      51144, -- BANDS - hematology
      50882, -- BICARBONATE | CHEMISTRY | BLOOD | 780733
      50885, -- BILIRUBIN, TOTAL | CHEMISTRY | BLOOD | 238277
      50912, -- CREATININE | CHEMISTRY | BLOOD | 797476
      50902, -- CHLORIDE | CHEMISTRY | BLOOD | 795568
      50806, -- CHLORIDE, WHOLE BLOOD | BLOOD GAS | BLOOD | 48187
      50931, -- GLUCOSE | CHEMISTRY | BLOOD | 748981
      50809, -- GLUCOSE | BLOOD GAS | BLOOD | 196734
      51221, -- HEMATOCRIT | HEMATOLOGY | BLOOD | 881846
      50810, -- HEMATOCRIT, CALCULATED | BLOOD GAS | BLOOD | 89715
      51222, -- HEMOGLOBIN | HEMATOLOGY | BLOOD | 752523
      50811, -- HEMOGLOBIN | BLOOD GAS | BLOOD | 89712
      50813, -- LACTATE | BLOOD GAS | BLOOD | 187124
      51265, -- PLATELET COUNT | HEMATOLOGY | BLOOD | 778444
      50971, -- POTASSIUM | CHEMISTRY | BLOOD | 845825
      50822, -- POTASSIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 192946
      51275, -- PTT | HEMATOLOGY | BLOOD | 474937
      51237, -- INR(PT) | HEMATOLOGY | BLOOD | 471183
      51274, -- PT | HEMATOLOGY | BLOOD | 469090
      50983, -- SODIUM | CHEMISTRY | BLOOD | 808489
      50824, -- SODIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 71503
      51006, -- UREA NITROGEN | CHEMISTRY | BLOOD | 791925
      51301, -- WHITE BLOOD CELLS | HEMATOLOGY | BLOOD | 753301
      51300  -- WBC COUNT | HEMATOLOGY | BLOOD | 2371
    )
    AND valuenum IS NOT null AND valuenum > 0 -- lab values cannot be 0 and cannot be negative
) pvt
GROUP BY pvt.subject_id, pvt.hadm_id, pvt.icustay_id
ORDER BY pvt.subject_id, pvt.hadm_id, pvt.icustay_id;

commit;


-- The aim of this query is to pivot entries related to blood gases and
-- chemistry values which were found in LABEVENTS

-- things to check:
--  when a mixed venous/arterial blood sample are taken at the same time, is the store time different?

DROP MATERIALIZED VIEW IF EXISTS bloodgasfirstday CASCADE;
create materialized view bloodgasfirstday as
select pvt.SUBJECT_ID, pvt.HADM_ID, pvt.ICUSTAY_ID, pvt.CHARTTIME

, max(case when label = 'SPECIMEN' then value else null end) as SPECIMEN
, max(case when label = 'AADO2' then valuenum else null end) as AADO2
, max(case when label = 'BASEEXCESS' then valuenum else null end) as BASEEXCESS
, max(case when label = 'BICARBONATE' then valuenum else null end) as BICARBONATE
, max(case when label = 'TOTALCO2' then valuenum else null end) as TOTALCO2
, max(case when label = 'CARBOXYHEMOGLOBIN' then valuenum else null end) as CARBOXYHEMOGLOBIN
, max(case when label = 'CHLORIDE' then valuenum else null end) as CHLORIDE
, max(case when label = 'CALCIUM' then valuenum else null end) as CALCIUM
, max(case when label = 'GLUCOSE' then valuenum else null end) as GLUCOSE
, max(case when label = 'HEMATOCRIT' then valuenum else null end) as HEMATOCRIT
, max(case when label = 'HEMOGLOBIN' then valuenum else null end) as HEMOGLOBIN
, max(case when label = 'INTUBATED' then valuenum else null end) as INTUBATED
, max(case when label = 'LACTATE' then valuenum else null end) as LACTATE
, max(case when label = 'METHEMOGLOBIN' then valuenum else null end) as METHEMOGLOBIN
, max(case when label = 'O2FLOW' then valuenum else null end) as O2FLOW
, max(case when label = 'FIO2' then valuenum else null end) as FIO2
, max(case when label = 'SO2' then valuenum else null end) as SO2 -- OXYGENSATURATION
, max(case when label = 'PCO2' then valuenum else null end) as PCO2
, max(case when label = 'PEEP' then valuenum else null end) as PEEP
, max(case when label = 'PH' then valuenum else null end) as PH
, max(case when label = 'PO2' then valuenum else null end) as PO2
, max(case when label = 'POTASSIUM' then valuenum else null end) as POTASSIUM
, max(case when label = 'REQUIREDO2' then valuenum else null end) as REQUIREDO2
, max(case when label = 'SODIUM' then valuenum else null end) as SODIUM
, max(case when label = 'TEMPERATURE' then valuenum else null end) as TEMPERATURE
, max(case when label = 'TIDALVOLUME' then valuenum else null end) as TIDALVOLUME
, max(case when label = 'VENTILATIONRATE' then valuenum else null end) as VENTILATIONRATE
, max(case when label = 'VENTILATOR' then valuenum else null end) as VENTILATOR
from
( -- begin query that extracts the data
  select ie.subject_id, ie.hadm_id, ie.icustay_id
  -- here we assign labels to ITEMIDs
  -- this also fuses together multiple ITEMIDs containing the same data
      , case
        when itemid = 50800 then 'SPECIMEN'
        when itemid = 50801 then 'AADO2'
        when itemid = 50802 then 'BASEEXCESS'
        when itemid = 50803 then 'BICARBONATE'
        when itemid = 50804 then 'TOTALCO2'
        when itemid = 50805 then 'CARBOXYHEMOGLOBIN'
        when itemid = 50806 then 'CHLORIDE'
        when itemid = 50808 then 'CALCIUM'
        when itemid = 50809 then 'GLUCOSE'
        when itemid = 50810 then 'HEMATOCRIT'
        when itemid = 50811 then 'HEMOGLOBIN'
        when itemid = 50812 then 'INTUBATED'
        when itemid = 50813 then 'LACTATE'
        when itemid = 50814 then 'METHEMOGLOBIN'
        when itemid = 50815 then 'O2FLOW'
        when itemid = 50816 then 'FIO2'
        when itemid = 50817 then 'SO2' -- OXYGENSATURATION
        when itemid = 50818 then 'PCO2'
        when itemid = 50819 then 'PEEP'
        when itemid = 50820 then 'PH'
        when itemid = 50821 then 'PO2'
        when itemid = 50822 then 'POTASSIUM'
        when itemid = 50823 then 'REQUIREDO2'
        when itemid = 50824 then 'SODIUM'
        when itemid = 50825 then 'TEMPERATURE'
        when itemid = 50826 then 'TIDALVOLUME'
        when itemid = 50827 then 'VENTILATIONRATE'
        when itemid = 50828 then 'VENTILATOR'
        else null
        end as label
        , charttime
        , value
        -- add in some sanity checks on the values
        , case
          when valuenum <= 0 then null
          when itemid = 50810 and valuenum > 100 then null -- hematocrit
          when itemid = 50816 and valuenum > 100 then null -- FiO2
          when itemid = 50817 and valuenum > 100 then null -- O2 sat
          when itemid = 50815 and valuenum >  70 then null -- O2 flow
          when itemid = 50821 and valuenum > 800 then null -- PO2
           -- conservative upper limit
        else valuenum
        end as valuenum

    from mimiciii.icustays ie
    left join mimiciii.labevents le
      on le.subject_id = ie.subject_id and le.hadm_id = ie.hadm_id
      and le.charttime between (ie.intime - interval '6' hour) and (ie.intime + interval '1' day)
      and le.ITEMID in
      -- blood gases
      (
        50800, 50801, 50802, 50803, 50804, 50805, 50806, 50807, 50808, 50809
        , 50810, 50811, 50812, 50813, 50814, 50815, 50816, 50817, 50818, 50819
        , 50820, 50821, 50822, 50823, 50824, 50825, 50826, 50827, 50828
        , 51545
      )
) pvt
group by pvt.subject_id, pvt.hadm_id, pvt.icustay_id, pvt.CHARTTIME
order by pvt.subject_id, pvt.hadm_id, pvt.icustay_id, pvt.CHARTTIME;


Copy (

-- Cohort of study: all the patients with 1 admission in ICU (multiple admissions in HADM are ok)
WITH study_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID
	from MIMICIII.ICUSTAYS ICU
	where ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not null and ICU.ICUSTAY_ID is not null
		and ICU.HADM_ID not in (select HADMID.HADM_ID
						from MIMICIII.ICUSTAYS HADMID
						where HADMID.HADM_ID is not null
						group by HADMID.HADM_ID
						having count(*) > 1)
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID),


-- Extracting AGE for all the patients in the ICU
	age_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, round(extract(day from (ICU.INTIME-PAT.DOB))/365.24) as AGE_ADMISSION
	from MIMICIII.ICUSTAYS ICU, MIMICIII.PATIENTS PAT
	where ICU.SUBJECT_ID = PAT.SUBJECT_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
		and ICU.INTIME is not NULL and PAT.DOB is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, extract(day from ICU.INTIME - PAT.DOB)
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, extract(day from ICU.INTIME - PAT.DOB)),


-- Extracting GENDER for all the patients in the ICU
	gender_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, PAT.GENDER as GENDER
	from MIMICIII.icustays ICU, MIMICIII.PATIENTS PAT
	where ICU.SUBJECT_ID = PAT.SUBJECT_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
		and PAT.GENDER is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, PAT.GENDER
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, PAT.GENDER),


-- Extracting RACE for all the patients in the ICU
	race_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, ADM.ETHNICITY as RACE, ADM.MARITAL_STATUS as MARITAL_STATUS
	from MIMICIII.icustays ICU, MIMICIII.ADMISSIONS ADM
	where ICU.SUBJECT_ID = ADM.SUBJECT_ID and ICU.HADM_ID = ADM.HADM_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
		and ADM.ETHNICITY is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, ADM.ETHNICITY, ADM.MARITAL_STATUS
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, ADM.ETHNICITY, ADM.MARITAL_STATUS),


-- Extracting ELIXHAUSER for all the patients in the ICU

	-- This code uses the latest version of Elixhauser provided by AHRQ

	-- first, we convert ICD9_CODE from a VARCHAR to a CHAR(5)
	-- this is the format used in the SAS code provided by the AHRQ
	-- it makes converting their code to SQL much simpler as we can directly use their syntax

	-- also note, that we *cannot* skip this step and use a varchar here
	-- why? well, for example, VALVE is coded as BETWEEN '4240 ' and '42499'
	-- if we used a varchar, then '4240' *is not* between this range
	-- but if we use a char(5), then '4240' *is* between this range
	-- and we would like the latter behavior
	-- it's possible removing the whitespaces would fix this - but I didn't test it.
	-- I prefer consistency with AHRQ.

	icd as
	(
	  select hadm_id, subject_id, seq_num
	    , cast(icd9_code as char(5)) as icd9_code
	  from mimiciii.diagnoses_icd
	  where seq_num != 1 -- we do not include the primary icd-9 code
	),

	eliflg as
	(
	select hadm_id, subject_id, seq_num, icd9_code
	-- note that these codes will seem incomplete at first
	-- for example, CHF is missing a lot of codes referenced in the literature (402.11, 402.91, etc)
	-- these codes are captured by hypertension flags instead
	-- later there are some complicated rules which confirm/reject those codes as CHF
	, CASE
	  when icd9_code = '39891' then 1
	  when icd9_code between '4280 ' and '4289 ' then 1
			end as CHF       /* Congestive heart failure */

	-- cardiac arrhythmias is removed in up to date versions
	, case
	    when icd9_code = '42610' then 1
	    when icd9_code = '42611' then 1
	    when icd9_code = '42613' then 1
	    when icd9_code between '4262 ' and '42653' then 1
	    when icd9_code between '4266 ' and '42689' then 1
	    when icd9_code = '4270 ' then 1
	    when icd9_code = '4272 ' then 1
	    when icd9_code = '42731' then 1
	    when icd9_code = '42760' then 1
	    when icd9_code = '4279 ' then 1
	    when icd9_code = '7850 ' then 1
	    when icd9_code between 'V450 ' and 'V4509' then 1
	    when icd9_code between 'V533 ' and 'V5339' then 1
	  end as ARYTHM /* Cardiac arrhythmias */

	, CASE
	  when icd9_code between '09320' and '09324' then 1
	  when icd9_code between '3940 ' and '3971 ' then 1
	  when icd9_code = '3979 ' then 1
	  when icd9_code between '4240 ' and '42499' then 1
	  when icd9_code between '7463 ' and '7466 ' then 1
	  when icd9_code = 'V422 ' then 1
	  when icd9_code = 'V433 ' then 1
			end as VALVE     /* Valvular disease */

	, CASE
	  when icd9_code between '41511' and '41519' then 1
	  when icd9_code between '4160 ' and '4169 ' then 1
	  when icd9_code = '4179 ' then 1
			end as PULMCIRC  /* Pulmonary circulation disorder */

	, CASE
	  when icd9_code between '4400 ' and '4409 ' then 1
	  when icd9_code between '44100' and '4419 ' then 1
	  when icd9_code between '4420 ' and '4429 ' then 1
	  when icd9_code between '4431 ' and '4439 ' then 1
	  when icd9_code between '44421' and '44422' then 1
	  when icd9_code = '4471 ' then 1
	  when icd9_code = '449  ' then 1
	  when icd9_code = '5571 ' then 1
	  when icd9_code = '5579 ' then 1
	  when icd9_code = 'V434 ' then 1
			end as PERIVASC  /* Peripheral vascular disorder */

	, CASE
	  when icd9_code = '4011 ' then 1
	  when icd9_code = '4019 ' then 1
	  when icd9_code between '64200' and '64204' then 1
			end as HTN       /* Hypertension, uncomplicated */

	, CASE
	  when icd9_code = '4010 ' then 1
	  when icd9_code = '4372 ' then 1
			end as HTNCX     /* Hypertension, complicated */


	      /******************************************************************/
	      /* The following are special, temporary formats used in the       */
	      /* creation of the hypertension complicated comorbidity when      */
	      /* overlapping with congestive heart failure or renal failure     */
	      /* occurs. These temporary formats are referenced in the program  */
	      /* called comoanaly2009.txt.                                      */
	      /******************************************************************/
	, CASE
	  when icd9_code between '64220' and '64224' then 1
			end as HTNPREG   /* Pre-existing hypertension complicating pregnancy */

	, CASE
	  when icd9_code = '40200' then 1
	  when icd9_code = '40210' then 1
	  when icd9_code = '40290' then 1
	  when icd9_code = '40509' then 1
	  when icd9_code = '40519' then 1
	  when icd9_code = '40599'         then 1
			end as HTNWOCHF  /* Hypertensive heart disease without heart failure */

	, CASE
	  when icd9_code = '40201' then 1
	  when icd9_code = '40211' then 1
	  when icd9_code = '40291'         then 1
			end as HTNWCHF   /* Hypertensive heart disease with heart failure */

	, CASE
	  when icd9_code = '40300' then 1
	  when icd9_code = '40310' then 1
	  when icd9_code = '40390' then 1
	  when icd9_code = '40501' then 1
	  when icd9_code = '40511' then 1
	  when icd9_code = '40591' then 1
	  when icd9_code between '64210' and '64214' then 1
			end as HRENWORF  /* Hypertensive renal disease without renal failure */

	, CASE
	  when icd9_code = '40301' then 1
	  when icd9_code = '40311' then 1
	  when icd9_code = '40391'         then 1
			end as HRENWRF   /* Hypertensive renal disease with renal failure */

	, CASE
	  when icd9_code = '40400' then 1
	  when icd9_code = '40410' then 1
	  when icd9_code = '40490'         then 1
			end as HHRWOHRF  /* Hypertensive heart and renal disease without heart or renal failure */

	, CASE
	  when icd9_code = '40401' then 1
	  when icd9_code = '40411' then 1
	  when icd9_code = '40491'         then 1
			end as HHRWCHF   /* Hypertensive heart and renal disease with heart failure */

	, CASE
	  when icd9_code = '40402' then 1
	  when icd9_code = '40412' then 1
	  when icd9_code = '40492'         then 1
			end as HHRWRF    /* Hypertensive heart and renal disease with renal failure */

	, CASE
	  when icd9_code = '40403' then 1
	  when icd9_code = '40413' then 1
	  when icd9_code = '40493'         then 1
			end as HHRWHRF   /* Hypertensive heart and renal disease with heart and renal failure */

	, CASE
	  when icd9_code between '64270' and '64274' then 1
	  when icd9_code between '64290' and '64294' then 1
			end as OHTNPREG  /* Other hypertension in pregnancy */

	      /******************** End Temporary Formats ***********************/

	, CASE
	  when icd9_code between '3420 ' and '3449 ' then 1
	  when icd9_code between '43820' and '43853' then 1
	  when icd9_code = '78072'         then 1
			end as PARA      /* Paralysis */

	, CASE
	  when icd9_code between '3300 ' and '3319 ' then 1
	  when icd9_code = '3320 ' then 1
	  when icd9_code = '3334 ' then 1
	  when icd9_code = '3335 ' then 1
	  when icd9_code = '3337 ' then 1
	  when icd9_code in ('33371','33372','33379','33385','33394') then 1
	  when icd9_code between '3340 ' and '3359 ' then 1
	  when icd9_code = '3380 ' then 1
	  when icd9_code = '340  ' then 1
	  when icd9_code between '3411 ' and '3419 ' then 1
	  when icd9_code between '34500' and '34511' then 1
	  when icd9_code between '3452 ' and '3453 ' then 1
	  when icd9_code between '34540' and '34591' then 1
	  when icd9_code between '34700' and '34701' then 1
	  when icd9_code between '34710' and '34711' then 1
	  when icd9_code = '3483' then 1 -- discontinued icd-9
	  when icd9_code between '64940' and '64944' then 1
	  when icd9_code = '7687 ' then 1
	  when icd9_code between '76870' and '76873' then 1
	  when icd9_code = '7803 ' then 1
	  when icd9_code = '78031' then 1
	  when icd9_code = '78032' then 1
	  when icd9_code = '78033' then 1
	  when icd9_code = '78039' then 1
	  when icd9_code = '78097' then 1
	  when icd9_code = '7843 '         then 1
			end as NEURO     /* Other neurological */

	, CASE
	  when icd9_code between '490  ' and '4928 ' then 1
	  when icd9_code between '49300' and '49392' then 1
	  when icd9_code between '494  ' and '4941 ' then 1
	  when icd9_code between '4950 ' and '505  ' then 1
	  when icd9_code = '5064 '         then 1
			end as CHRNLUNG  /* Chronic pulmonary disease */

	, CASE
	  when icd9_code between '25000' and '25033' then 1
	  when icd9_code between '64800' and '64804' then 1
	  when icd9_code between '24900' and '24931' then 1
			end as DM        /* Diabetes w/o chronic complications*/

	, CASE
	  when icd9_code between '25040' and '25093' then 1
	  when icd9_code = '7751 ' then 1
	  when icd9_code between '24940' and '24991' then 1
			end as DMCX      /* Diabetes w/ chronic complications */

	, CASE
	  when icd9_code between '243  ' and '2442 ' then 1
	  when icd9_code = '2448 ' then 1
	  when icd9_code = '2449 '         then 1
			end as HYPOTHY   /* Hypothyroidism */

	, CASE
	  when icd9_code = '585  ' then 1 -- discontinued code
	  when icd9_code = '5853 ' then 1
	  when icd9_code = '5854 ' then 1
	  when icd9_code = '5855 ' then 1
	  when icd9_code = '5856 ' then 1
	  when icd9_code = '5859 ' then 1
	  when icd9_code = '586  ' then 1
	  when icd9_code = 'V420 ' then 1
	  when icd9_code = 'V451 ' then 1
	  when icd9_code between 'V560 ' and 'V5632' then 1
	  when icd9_code = 'V568 ' then 1
	  when icd9_code between 'V4511' and 'V4512' then 1
			end as RENLFAIL  /* Renal failure */

	, CASE
	  when icd9_code = '07022' then 1
	  when icd9_code = '07023' then 1
	  when icd9_code = '07032' then 1
	  when icd9_code = '07033' then 1
	  when icd9_code = '07044' then 1
	  when icd9_code = '07054' then 1
	  when icd9_code = '4560 ' then 1
	  when icd9_code = '4561 ' then 1
	  when icd9_code = '45620' then 1
	  when icd9_code = '45621' then 1
	  when icd9_code = '5710 ' then 1
	  when icd9_code = '5712 ' then 1
	  when icd9_code = '5713 ' then 1
	  when icd9_code between '57140' and '57149' then 1
	  when icd9_code = '5715 ' then 1
	  when icd9_code = '5716 ' then 1
	  when icd9_code = '5718 ' then 1
	  when icd9_code = '5719 ' then 1
	  when icd9_code = '5723 ' then 1
	  when icd9_code = '5728 ' then 1
	  when icd9_code = '5735 ' then 1
	  when icd9_code = 'V427 '         then 1
			end as LIVER     /* Liver disease */

	, CASE
	  when icd9_code = '53141' then 1
	  when icd9_code = '53151' then 1
	  when icd9_code = '53161' then 1
	  when icd9_code = '53170' then 1
	  when icd9_code = '53171' then 1
	  when icd9_code = '53191' then 1
	  when icd9_code = '53241' then 1
	  when icd9_code = '53251' then 1
	  when icd9_code = '53261' then 1
	  when icd9_code = '53270' then 1
	  when icd9_code = '53271' then 1
	  when icd9_code = '53291' then 1
	  when icd9_code = '53341' then 1
	  when icd9_code = '53351' then 1
	  when icd9_code = '53361' then 1
	  when icd9_code = '53370' then 1
	  when icd9_code = '53371' then 1
	  when icd9_code = '53391' then 1
	  when icd9_code = '53441' then 1
	  when icd9_code = '53451' then 1
	  when icd9_code = '53461' then 1
	  when icd9_code = '53470' then 1
	  when icd9_code = '53471' then 1
	  when icd9_code = '53491'         then 1
			end as ULCER     /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */

	, CASE
	  when icd9_code between '042  ' and '0449 ' then 1
			end as AIDS      /* HIV and AIDS */

	, CASE
	  when icd9_code between '20000' and '20238' then 1
	  when icd9_code between '20250' and '20301' then 1
	  when icd9_code = '2386 ' then 1
	  when icd9_code = '2733 ' then 1
	  when icd9_code between '20302' and '20382' then 1
			end as LYMPH     /* Lymphoma */

	, CASE
	  when icd9_code between '1960 ' and '1991 ' then 1
	  when icd9_code between '20970' and '20975' then 1
	  when icd9_code = '20979' then 1
	  when icd9_code = '78951'         then 1
			end as METS      /* Metastatic cancer */

	, CASE
	  when icd9_code between '1400 ' and '1729 ' then 1
	  when icd9_code between '1740 ' and '1759 ' then 1
	  when icd9_code between '179  ' and '1958 ' then 1
	  when icd9_code between '20900' and '20924' then 1
	  when icd9_code between '20925' and '2093 ' then 1
	  when icd9_code between '20930' and '20936' then 1
	  when icd9_code between '25801' and '25803' then 1
			end as TUMOR     /* Solid tumor without metastasis */

	, CASE
	  when icd9_code = '7010 ' then 1
	  when icd9_code between '7100 ' and '7109 ' then 1
	  when icd9_code between '7140 ' and '7149 ' then 1
	  when icd9_code between '7200 ' and '7209 ' then 1
	  when icd9_code = '725  ' then 1
			end as ARTH              /* Rheumatoid arthritis/collagen vascular diseases */

	, CASE
	  when icd9_code between '2860 ' and '2869 ' then 1
	  when icd9_code = '2871 ' then 1
	  when icd9_code between '2873 ' and '2875 ' then 1
	  when icd9_code between '64930' and '64934' then 1
	  when icd9_code = '28984'         then 1
			end as COAG      /* Coagulation deficiency */

	, CASE
	  when icd9_code = '2780 ' then 1
	  when icd9_code = '27800' then 1
	  when icd9_code = '27801' then 1
	  when icd9_code = '27803' then 1
	  when icd9_code between '64910' and '64914' then 1
	  when icd9_code between 'V8530' and 'V8539' then 1
	  when icd9_code = 'V854 ' then 1 -- hierarchy used for AHRQ v3.6 and earlier
	  when icd9_code between 'V8541' and 'V8545' then 1
	  when icd9_code = 'V8554' then 1
	  when icd9_code = '79391'         then 1
			end as OBESE     /* Obesity      */

	, CASE
	  when icd9_code between '260  ' and '2639 ' then 1
	  when icd9_code between '78321' and '78322' then 1
			end as WGHTLOSS  /* Weight loss */

	, CASE
	  when icd9_code between '2760 ' and '2769 ' then 1
			end as LYTES     /* Fluid and electrolyte disorders - note:
	                                      this comorbidity should be dropped when
	                                      used with the AHRQ Patient Safety Indicators*/
	, CASE
	  when icd9_code = '2800 ' then 1
	  when icd9_code between '64820' and '64824' then 1
			end as BLDLOSS   /* Blood loss anemia */

	, CASE
	  when icd9_code between '2801 ' and '2819 ' then 1
	  when icd9_code between '28521' and '28529' then 1
	  when icd9_code = '2859 '         then 1
			end as ANEMDEF  /* Deficiency anemias */

	, CASE
	  when icd9_code between '2910 ' and '2913 ' then 1
	  when icd9_code = '2915 ' then 1
	  when icd9_code = '2918 ' then 1
	  when icd9_code = '29181' then 1
	  when icd9_code = '29182' then 1
	  when icd9_code = '29189' then 1
	  when icd9_code = '2919 ' then 1
	  when icd9_code between '30300' and '30393' then 1
	  when icd9_code between '30500' and '30503' then 1
			end as ALCOHOL   /* Alcohol abuse */

	, CASE
	  when icd9_code = '2920 ' then 1
	  when icd9_code between '29282' and '29289' then 1
	  when icd9_code = '2929 ' then 1
	  when icd9_code between '30400' and '30493' then 1
	  when icd9_code between '30520' and '30593' then 1
	  when icd9_code between '64830' and '64834' then 1
			end as DRUG      /* Drug abuse */

	, CASE
	  when icd9_code between '29500' and '2989 ' then 1
	  when icd9_code = '29910' then 1
	  when icd9_code = '29911'         then 1
			end as PSYCH    /* Psychoses */

	, CASE
	  when icd9_code = '3004 ' then 1
	  when icd9_code = '30112' then 1
	  when icd9_code = '3090 ' then 1
	  when icd9_code = '3091 ' then 1
	  when icd9_code = '311  '         then 1
			end as DEPRESS  /* Depression */
	from icd
	),

	-- collapse the icd9_code specific flags into hadm_id specific flags
	-- this groups comorbidities together for a single patient admission
	eligrp as
	(
	  select hadm_id, subject_id
	  , max(chf) as chf
	  , max(arythm) as arythm
	  , max(valve) as valve
	  , max(pulmcirc) as pulmcirc
	  , max(perivasc) as perivasc
	  , max(htn) as htn
	  , max(htncx) as htncx
	  , max(htnpreg) as htnpreg
	  , max(htnwochf) as htnwochf
	  , max(htnwchf) as htnwchf
	  , max(hrenworf) as hrenworf
	  , max(hrenwrf) as hrenwrf
	  , max(hhrwohrf) as hhrwohrf
	  , max(hhrwchf) as hhrwchf
	  , max(hhrwrf) as hhrwrf
	  , max(hhrwhrf) as hhrwhrf
	  , max(ohtnpreg) as ohtnpreg
	  , max(para) as para
	  , max(neuro) as neuro
	  , max(chrnlung) as chrnlung
	  , max(dm) as dm
	  , max(dmcx) as dmcx
	  , max(hypothy) as hypothy
	  , max(renlfail) as renlfail
	  , max(liver) as liver
	  , max(ulcer) as ulcer
	  , max(aids) as aids
	  , max(lymph) as lymph
	  , max(mets) as mets
	  , max(tumor) as tumor
	  , max(arth) as arth
	  , max(coag) as coag
	  , max(obese) as obese
	  , max(wghtloss) as wghtloss
	  , max(lytes) as lytes
	  , max(bldloss) as bldloss
	  , max(anemdef) as anemdef
	  , max(alcohol) as alcohol
	  , max(drug) as drug
	  , max(psych) as psych
	  , max(depress) as depress
	from eliflg
	group by hadm_id, subject_id
	),

	-- DRG FILTER --
	msdrg as
	(
	select
	  hadm_id, subject_id
	/**** V29 MS-DRG Formats ****/

	/* Cardiac */
	, case
	    when d.drg_code between 001 and 002 then 1
	    when d.drg_code between 215 and 238 then 1
	    when d.drg_code between 242 and 252 then 1
	    when d.drg_code between 253 and 254 then 1
	    when d.drg_code between 258 and 262 then 1
	    when d.drg_code between 265 and 267 then 1
	    when d.drg_code between 280 and 293 then 1
	    when d.drg_code between 296 and 298 then 1
	    when d.drg_code between 302 and 303 then 1
	    when d.drg_code between 306 and 313 then 1
	else 0 end as CARDDRG

	/* Peripheral vascular */
	, case
	    when d.drg_code between 299 and 301 then 1
	else 0 end as PERIDRG

	/* Renal */
	, case
	    when d.drg_code = 652 then 1
	    when d.drg_code between 656 and 661 then 1
	    when d.drg_code between 673 and 675 then 1
	    when d.drg_code between 682 and 700 then 1
	else 0 end as RENALDRG

	/* Nervous system */
	, case
	    when d.drg_code between 020 and 042 then 1
	    when d.drg_code between 052 and 103 then 1
	else 0 end as NERVDRG

	/* Cerebrovascular */
	, case
	    when d.drg_code between 020 and 022 then 1
	    when d.drg_code between 034 and 039 then 1
	    when d.drg_code between 064 and 072 then 1
	else 0 end as CEREDRG

	/* COPD asthma */
	, case
	    when d.drg_code between 190 and 192 then 1
	    when d.drg_code between 202 and 203 then 1
	else 0 end as PULMDRG

	/* Diabetes */
	, case
	    when d.drg_code between 637 and 639 then 1
	else 0 end as  DIABDRG

	/* Thyroid endocrine */
	, case
	    when d.drg_code between 625 and 627 then 1
	    when d.drg_code between 643 and 645 then 1
	else 0 end as HYPODRG

	/* Kidney transp, renal fail/dialysis */
	, case
	    when d.drg_code = 652 then 1
	    when d.drg_code between 682 and 685 then 1
	else 0 end as RENFDRG

	/* Liver */
	, case
	    when d.drg_code between 420 and 425 then 1
	    when d.drg_code between 432 and 434 then 1
	    when d.drg_code between 441 and 446 then 1
	else 0 end as LIVERDRG

	/* GI hemorrhage or ulcer */
	, case
	    when d.drg_code between 377 and 384 then 1
	else 0 end as ULCEDRG

	/* Human immunodeficiency virus */
	, case
	    when d.drg_code between 969 and 970 then 1
	    when d.drg_code between 974 and 977 then 1
	else 0 end as HIVDRG

	/* Leukemia/lymphoma */
	, case
	    when d.drg_code between 820 and 830 then 1
	    when d.drg_code between 834 and 849 then 1
	else 0 end as LEUKDRG

	/* Cancer, lymphoma */
	, case
	    when d.drg_code = 054 then 1
	    when d.drg_code = 055 then 1
	    when d.drg_code between 146 and 148 then 1
	    when d.drg_code between 180 and 182 then 1
	    when d.drg_code between 374 and 376 then 1
	    when d.drg_code between 435 and 437 then 1
	    when d.drg_code between 542 and 544 then 1
	    when d.drg_code between 582 and 585 then 1
	    when d.drg_code between 597 and 599 then 1
	    when d.drg_code between 656 and 658 then 1
	    when d.drg_code between 686 and 688 then 1
	    when d.drg_code between 715 and 716 then 1
	    when d.drg_code between 722 and 724 then 1
	    when d.drg_code between 736 and 741 then 1
	    when d.drg_code between 754 and 756 then 1
	    when d.drg_code between 826 and 830 then 1
	    when d.drg_code between 843 and 849 then 1
	else 0 end as CANCDRG

	/* Connective tissue */
	, case
	    when d.drg_code between 545 and 547 then 1
	else 0 end as ARTHDRG

	/* Nutrition/metabolic */
	, case
	    when d.drg_code between 640 and 641 then 1
	else 0 end as NUTRDRG

	/* Anemia */
	, case
	    when d.drg_code between 808 and 812 then 1
	else 0 end as ANEMDRG

	/* Alcohol drug */
	, case
	    when d.drg_code between 894 and 897 then 1
	else 0 end as ALCDRG

	/*Coagulation disorders*/
	, case
	    when d.drg_code = 813 then 1
	else 0 end as COAGDRG

	/*Hypertensive Complicated  */
	, case
	    when d.drg_code = 077 then 1
	    when d.drg_code = 078 then 1
	    when d.drg_code = 304 then 1
	else 0 end as HTNCXDRG

	/*Hypertensive Uncomplicated  */
	, case
	    when d.drg_code = 079 then 1
	    when d.drg_code = 305 then 1
	else 0 end as HTNDRG

	/* Psychoses */
	, case
	    when d.drg_code = 885 then 1
	else 0 end as PSYDRG

	/* Obesity */
	, case
	    when d.drg_code between 619 and 621 then 1
	else 0 end as OBESEDRG

	/* Depressive Neuroses */
	, case
	    when d.drg_code = 881 then 1
	else 0 end as DEPRSDRG

	from
	(
	  select hadm_id, subject_id, drg_type, cast(drg_code as numeric) as drg_code from mimiciii.drgcodes where drg_type = 'MS'
	) d

	),

	hcfadrg as
	(
	select
	  hadm_id, subject_id

	  /** V24 DRG Formats  **/

	  /* Cardiac */
	  , case
	      when d.drg_code between 103 and 112 then 1
	      when d.drg_code between 115 and 118 then 1
	      when d.drg_code between 121 and 127 then 1
	      when d.drg_code = 129 then 1
	      when d.drg_code = 132 then 1
	      when d.drg_code = 133 then 1
	      when d.drg_code between 135 and 143 then 1
	      when d.drg_code between 514 and 518 then 1
	      when d.drg_code between 525 and 527 then 1
	      when d.drg_code between 535 and 536 then 1
	      when d.drg_code between 547 and 550 then 1
	      when d.drg_code between 551 and 558 then 1
	  else 0 end as CARDDRG

	  /* Peripheral vascular */
	  , case
	      when d.drg_code = 130 then 1
	      when d.drg_code = 131 then 1
	  else 0 end as PERIDRG

	  /* Renal */
	  , case
	      when d.drg_code between 302 and 305 then 1
	      when d.drg_code between 315 and 333 then 1

	  else 0 end as RENALDRG

	  /* Nervous system */
	  , case
	      when d.drg_code between 1 and 35 then 1
	      when d.drg_code = 524 then 1
	      when d.drg_code between 528 and 534 then 1
	      when d.drg_code = 543 then 1
	      when d.drg_code between 559 and 564 then 1
	      when d.drg_code = 577 then 1

	  else 0 end as NERVDRG

	   /* Cerebrovascular */
	  , case
	      when d.drg_code = 5 then 1
	      when d.drg_code between 14 and 17 then 1
	      when d.drg_code = 524 then 1
	      when d.drg_code = 528 then 1
	      when d.drg_code between 533 and 534 then 1
	      when d.drg_code = 577 then 1
	  else 0 end as CEREDRG

	  /* COPD asthma */
	  , case
	      when d.drg_code = 88 then 1
	      when d.drg_code between 96 and 98 then 1

	  else 0 end as PULMDRG

	  /* Diabetes */
	  , case
	      when d.drg_code = 294 then 1
	      when d.drg_code = 295 then 1
	  else 0 end as DIABDRG

	  /* Thyroid endocrine */
	  , case
	      when d.drg_code = 290 then 1
	      when d.drg_code = 300 then 1
	      when d.drg_code = 301 then 1

	  else 0 end as HYPODRG

	  /* Kidney transp, renal fail/dialysis */
	  , case
	      when d.drg_code = 302 then 1
	      when d.drg_code = 316 then 1
	      when d.drg_code = 317 then 1
	  else 0 end as RENFDRG

	  /* Liver */
	  , case
	      when d.drg_code between 199 and 202 then 1
	      when d.drg_code between 205 and 208 then 1

	  else 0 end as LIVERDRG

	  /* GI hemorrhage or ulcer */
	  , case
	      when d.drg_code between 174 and 178 then 1
	  else 0 end as ULCEDRG

	  /* Human immunodeficiency virus */
	  , case
	      when d.drg_code = 488 then 1
	      when d.drg_code = 489 then 1
	      when d.drg_code = 490 then 1

	  else 0 end as HIVDRG

	  /* Leukemia/lymphoma */
	  , case
	      when d.drg_code between 400 and 414 then 1
	      when d.drg_code = 473 then 1
	      when d.drg_code = 492 then 1
	      when d.drg_code between 539 and 540 then 1

	  else 0 end as LEUKDRG

	  /* Cancer, lymphoma */
	  , case
	      when d.drg_code = 10 then 1
	      when d.drg_code = 11 then 1
	      when d.drg_code = 64 then 1
	      when d.drg_code = 82 then 1
	      when d.drg_code = 172 then 1
	      when d.drg_code = 173 then 1
	      when d.drg_code = 199 then 1
	      when d.drg_code = 203 then 1
	      when d.drg_code = 239 then 1

	      when d.drg_code between 257 and 260 then 1
	      when d.drg_code = 274 then 1
	      when d.drg_code = 275 then 1
	      when d.drg_code = 303 then 1
	      when d.drg_code = 318 then 1
	      when d.drg_code = 319 then 1

	      when d.drg_code = 338 then 1
	      when d.drg_code = 344 then 1
	      when d.drg_code = 346 then 1
	      when d.drg_code = 347 then 1
	      when d.drg_code = 354 then 1
	      when d.drg_code = 355 then 1
	      when d.drg_code = 357 then 1
	      when d.drg_code = 363 then 1
	      when d.drg_code = 366 then 1

	      when d.drg_code = 367 then 1
	      when d.drg_code between 406 and 414 then 1
	  else 0 end as CANCDRG

	  /* Connective tissue */
	  , case
	      when d.drg_code = 240 then 1
	      when d.drg_code = 241 then 1
	  else 0 end as ARTHDRG

	  /* Nutrition/metabolic */
	  , case
	      when d.drg_code between 296 and 298 then 1
	  else 0 end as NUTRDRG

	  /* Anemia */
	  , case
	      when d.drg_code = 395 then 1
	      when d.drg_code = 396 then 1
	      when d.drg_code = 574 then 1
	  else 0 end as ANEMDRG

	  /* Alcohol drug */
	  , case
	      when d.drg_code between 433 and 437 then 1
	      when d.drg_code between 521 and 523 then 1
	  else 0 end as ALCDRG

	  /* Coagulation disorders */
	  , case
	      when d.drg_code = 397 then 1
	  else 0 end as COAGDRG

	  /* Hypertensive Complicated */
	  , case
	      when d.drg_code = 22 then 1
	      when d.drg_code = 134 then 1
	  else 0 end as HTNCXDRG

	  /* Hypertensive Uncomplicated */
	  , case
	      when d.drg_code = 134 then 1
	  else 0 end as HTNDRG

	  /* Psychoses */
	  , case
	      when d.drg_code = 430 then 1
	  else 0 end as PSYDRG

	  /* Obesity */
	  , case
	      when d.drg_code = 288 then 1
	  else 0 end as OBESEDRG

	  /* Depressive Neuroses */
	  , case
	      when d.drg_code = 426 then 1
	  else 0 end as DEPRSDRG

	  from
	  (
	    select hadm_id, subject_id, drg_type, cast(drg_code as numeric) as drg_code from mimiciii.drgcodes where drg_type = 'HCFA'
	  ) d
	),

	-- merge DRG groups together
	drggrp as
	(
	  select hadm_id, subject_id
	, max(carddrg) as carddrg
	, max(peridrg) as peridrg
	, max(renaldrg) as renaldrg
	, max(nervdrg) as nervdrg
	, max(ceredrg) as ceredrg
	, max(pulmdrg) as pulmdrg
	, max(diabdrg) as diabdrg
	, max(hypodrg) as hypodrg
	, max(renfdrg) as renfdrg
	, max(liverdrg) as liverdrg
	, max(ulcedrg) as ulcedrg
	, max(hivdrg) as hivdrg
	, max(leukdrg) as leukdrg
	, max(cancdrg) as cancdrg
	, max(arthdrg) as arthdrg
	, max(nutrdrg) as nutrdrg
	, max(anemdrg) as anemdrg
	, max(alcdrg) as alcdrg
	, max(coagdrg) as coagdrg
	, max(htncxdrg) as htncxdrg
	, max(htndrg) as htndrg
	, max(psydrg) as psydrg
	, max(obesedrg) as obesedrg
	, max(deprsdrg) as deprsdrg
	from
	(
	  select d1.* from msdrg d1
	  UNION
	  select d1.* from hcfadrg d1
	) d
	group by d.hadm_id, d.subject_id
	),

	-- now merge these flags together to define elixhauser
	-- most are straightforward.. but hypertension flags are a bit more complicated
	eli_merged_complete as
	(
	select adm.subject_id, adm.hadm_id
	, case
	    when carddrg = 1 then 0 -- DRG filter

	    when chf     = 1 then 1
	    when htnwchf = 1 then 1
	    when hhrwchf = 1 then 1
	    when hhrwhrf = 1 then 1
	  else 0 end as CONGESTIVE_HEART_FAILURE
	, case
	    when carddrg = 1 then 0 -- DRG filter
	    when arythm = 1 then 1
	  else 0 end as CARDIAC_ARRHYTHMIAS
	, case
	    when carddrg = 1 then 0
	    when valve = 1 then 1
	  else 0 end as VALVULAR_DISEASE
	, case
	    when carddrg = 1 or pulmdrg = 1 then 0
	    when pulmcirc = 1 then 1
	    else 0 end as PULMONARY_CIRCULATION
	, case
	    when peridrg  = 1 then 0
	    when perivasc = 1 then 1
	    else 0 end as PERIPHERAL_VASCULAR

	-- we combine 'htn' and 'htncx' into 'HYPERTENSION'
	-- note 'htn' (hypertension) is only 1 if 'htncx' (complicated hypertension) is 0
	-- also if htncxdrg = 1, then htndrg = 1

	-- In the original SAS code, it appears that:
	--  HTN can be 1
	--  HTNCX is set to 0 by DRGs
	--  but HTN_C is still 1, because HTN is 1
	-- so we have to do this complex addition.
	,
	case
	  when
	(
	-- first hypertension
	case
	  when htndrg = 0 then 0
	  when htn = 1 then 1
	else 0 end
	)
	+
	(
	-- next complicated hypertension
	case
	    when htncx    = 1 and htncxdrg = 1 then 0

	    when htnpreg  = 1 and htncxdrg = 1 then 0
	    when htnwochf = 1 and (htncxdrg = 1 OR carddrg = 1) then 0
	    when htnwchf  = 1 and htncxdrg = 1 then 0
	    when htnwchf  = 1 and carddrg = 1 then 0
	    when hrenworf = 1 and (htncxdrg = 1 or renaldrg = 1) then 0
	    when hrenwrf  = 1 and htncxdrg = 1 then 0
	    when hrenwrf  = 1 and renaldrg = 1 then 0
	    when hhrwohrf = 1 and (htncxdrg = 1 or carddrg = 1 or renaldrg = 1) then 0
	    when hhrwchf  = 1 and (htncxdrg = 1 or carddrg = 1 or renaldrg = 1) then 0
	    when hhrwrf   = 1 and (htncxdrg = 1 or carddrg = 1 or renaldrg = 1) then 0
	    when hhrwhrf  = 1 and (htncxdrg = 1 or carddrg = 1 or renaldrg = 1) then 0
	    when ohtnpreg = 1 and (htncxdrg = 1 or carddrg = 1 or renaldrg = 1) then 0

	    when htncx = 1 then 1
	    when htnpreg = 1 then 1
	    when htnwochf = 1 then 1
	    when htnwchf = 1 then 1
	    when hrenworf = 1 then 1
	    when hrenwrf = 1 then 1
	    when hhrwohrf = 1 then 1
	    when hhrwchf = 1 then 1
	    when hhrwrf = 1 then 1
	    when hhrwhrf = 1 then 1
	    when ohtnpreg = 1 then 1
	  else 0 end
	)
	  > 0 then 1 else 0 end as HYPERTENSION

	, case when ceredrg = 1 then 0 when para      = 1 then 1 else 0 end as PARALYSIS
	, case when nervdrg = 1 then 0 when neuro     = 1 then 1 else 0 end as OTHER_NEUROLOGICAL
	, case when pulmdrg = 1 then 0 when chrnlung  = 1 then 1 else 0 end as CHRONIC_PULMONARY
	, case
	    -- only the more severe comorbidity (complicated diabetes) is kept
	    when diabdrg = 1 then 0
	    when dmcx = 1 then 0
	    when dm = 1 then 1
	  else 0 end as DIABETES_UNCOMPLICATED
	, case when diabdrg = 1 then 0 when dmcx    = 1 then 1 else 0 end as DIABETES_COMPLICATED
	, case when hypodrg = 1 then 0 when hypothy = 1 then 1 else 0 end as HYPOTHYROIDISM
	, case
	    when renaldrg = 1 then 0
	    when renlfail = 1 then 1
	    when hrenwrf  = 1 then 1
	    when hhrwrf   = 1 then 1
	    when hhrwhrf  = 1 then 1
	  else 0 end as RENAL_FAILURE

	, case when liverdrg  = 1 then 0 when liver = 1 then 1 else 0 end as LIVER_DISEASE
	, case when ulcedrg   = 1 then 0 when ulcer = 1 then 1 else 0 end as PEPTIC_ULCER
	, case when hivdrg    = 1 then 0 when aids = 1 then 1 else 0 end as AIDS
	, case when leukdrg   = 1 then 0 when lymph = 1 then 1 else 0 end as LYMPHOMA
	, case when cancdrg   = 1 then 0 when mets = 1 then 1 else 0 end as METASTATIC_CANCER
	, case
	    when cancdrg = 1 then 0
	    -- only the more severe comorbidity (metastatic cancer) is kept
	    when mets = 1 then 0
	    when tumor = 1 then 1
	  else 0 end as SOLID_TUMOR
	, case when arthdrg   = 1 then 0 when arth = 1 then 1 else 0 end as RHEUMATOID_ARTHRITIS
	, case when coagdrg   = 1 then 0 when coag = 1 then 1 else 0 end as COAGULOPATHY
	, case when nutrdrg   = 1
	         OR obesedrg  = 1 then 0 when obese = 1 then 1 else 0 end as OBESITY
	, case when nutrdrg   = 1 then 0 when wghtloss = 1 then 1 else 0 end as WEIGHT_LOSS
	, case when nutrdrg   = 1 then 0 when lytes = 1 then 1 else 0 end as FLUID_ELECTROLYTE
	, case when anemdrg   = 1 then 0 when bldloss = 1 then 1 else 0 end as BLOOD_LOSS_ANEMIA
	, case when anemdrg   = 1 then 0 when anemdef = 1 then 1 else 0 end as DEFICIENCY_ANEMIAS
	, case when alcdrg    = 1 then 0 when alcohol = 1 then 1 else 0 end as ALCOHOL_ABUSE
	, case when alcdrg    = 1 then 0 when drug = 1 then 1 else 0 end as DRUG_ABUSE
	, case when psydrg    = 1 then 0 when psych = 1 then 1 else 0 end as PSYCHOSES
	, case when deprsdrg  = 1 then 0 when depress = 1 then 1 else 0 end as DEPRESSION


	from mimiciii.admissions adm
	left join eligrp eli
	  on adm.hadm_id = eli.hadm_id and adm.subject_id = eli.subject_id
	left join drggrp d
	  on adm.hadm_id = d.hadm_id and adm.subject_id = d.subject_id
	order by adm.hadm_id
	),

	eli_complete_plus_summaries as
	(
	select *
	,  -- Below is the van Walraven score
	   0 * AIDS +
	   0 * ALCOHOL_ABUSE +
	  -2 * BLOOD_LOSS_ANEMIA +
	   7 * CONGESTIVE_HEART_FAILURE +
	   -- Cardiac arrhythmias are not included in van Walraven based on Quan 2007
	   3 * CHRONIC_PULMONARY +
	   3 * COAGULOPATHY +
	  -2 * DEFICIENCY_ANEMIAS +
	  -3 * DEPRESSION +
	   0 * DIABETES_COMPLICATED +
	   0 * DIABETES_UNCOMPLICATED +
	  -7 * DRUG_ABUSE +
	   5 * FLUID_ELECTROLYTE +
	   0 * HYPERTENSION +
	   0 * HYPOTHYROIDISM +
	   11 * LIVER_DISEASE +
	   9 * LYMPHOMA +
	   12 * METASTATIC_CANCER +
	   6 * OTHER_NEUROLOGICAL +
	  -4 * OBESITY +
	   7 * PARALYSIS +
	   2 * PERIPHERAL_VASCULAR +
	   0 * PEPTIC_ULCER +
	   0 * PSYCHOSES +
	   4 * PULMONARY_CIRCULATION +
	   0 * RHEUMATOID_ARTHRITIS +
	   5 * RENAL_FAILURE +
	   4 * SOLID_TUMOR +
	  -1 * VALVULAR_DISEASE +
	   6 * WEIGHT_LOSS
	as elixhauser_vanwalraven


	,  -- Below is the 29 component SID score
	   0 * AIDS +
	  -2 * ALCOHOL_ABUSE +
	  -2 * BLOOD_LOSS_ANEMIA +
	   -- Cardiac arrhythmias are not included in SID-29
	   9 * CONGESTIVE_HEART_FAILURE +
	   3 * CHRONIC_PULMONARY +
	   9 * COAGULOPATHY +
	   0 * DEFICIENCY_ANEMIAS +
	  -4 * DEPRESSION +
	   0 * DIABETES_COMPLICATED +
	  -1 * DIABETES_UNCOMPLICATED +
	  -8 * DRUG_ABUSE +
	   9 * FLUID_ELECTROLYTE +
	  -1 * HYPERTENSION +
	   0 * HYPOTHYROIDISM +
	   5 * LIVER_DISEASE +
	   6 * LYMPHOMA +
	   13 * METASTATIC_CANCER +
	   4 * OTHER_NEUROLOGICAL +
	  -4 * OBESITY +
	   3 * PARALYSIS +
	   0 * PEPTIC_ULCER +
	   4 * PERIPHERAL_VASCULAR +
	  -4 * PSYCHOSES +
	   5 * PULMONARY_CIRCULATION +
	   6 * RENAL_FAILURE +
	   0 * RHEUMATOID_ARTHRITIS +
	   8 * SOLID_TUMOR +
	   0 * VALVULAR_DISEASE +
	   8 * WEIGHT_LOSS
	as elixhauser_SID29

	,  -- Below is the 30 component SID score
	   0 * AIDS +
	   0 * ALCOHOL_ABUSE +
	  -3 * BLOOD_LOSS_ANEMIA +
	   8 * CARDIAC_ARRHYTHMIAS +
	   9 * CONGESTIVE_HEART_FAILURE +
	   3 * CHRONIC_PULMONARY +
	  12 * COAGULOPATHY +
	   0 * DEFICIENCY_ANEMIAS +
	  -5 * DEPRESSION +
	   1 * DIABETES_COMPLICATED +
	   0 * DIABETES_UNCOMPLICATED +
	 -11 * DRUG_ABUSE +
	  11 * FLUID_ELECTROLYTE +
	  -2 * HYPERTENSION +
	   0 * HYPOTHYROIDISM +
	   7 * LIVER_DISEASE +
	   8 * LYMPHOMA +
	  17 * METASTATIC_CANCER +
	   5 * OTHER_NEUROLOGICAL +
	  -5 * OBESITY +
	   4 * PARALYSIS +
	   0 * PEPTIC_ULCER +
	   4 * PERIPHERAL_VASCULAR +
	  -6 * PSYCHOSES +
	   5 * PULMONARY_CIRCULATION +
	   7 * RENAL_FAILURE +
	   0 * RHEUMATOID_ARTHRITIS +
	  10 * SOLID_TUMOR +
	   0 * VALVULAR_DISEASE +
	  10 * WEIGHT_LOSS
	as elixhauser_SID30
	from eli_merged_complete
	),

	elixhauser_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, EMC.CONGESTIVE_HEART_FAILURE AS CONGESTIVE_HEART_FAILURE, EMC.CARDIAC_ARRHYTHMIAS AS CARDIAC_ARRHYTHMIAS, EMC.valvular_disease AS VALVULAR_DISEASE, EMC.hypertension AS HYPERTENSION, EMC.diabetes_uncomplicated AS DIABETES_UNCOMPLICATED, EMC.diabetes_complicated AS DIABETES_COMPLICATED, EMC.renal_failure AS RENAL_FAILURE, EMC.liver_disease AS LIVER_DISEASE, EMC.OBESITY AS OBESITY, EMC.elixhauser_vanwalraven AS ELIXHAUSER_VANWALRAVEN, EMC.elixhauser_SID29 AS ELIXHAUSER_SID29, EMC.elixhauser_SID30 AS ELIXHAUSER_SID30, EMC.SOLID_TUMOR, EMC.METASTATIC_CANCER, EMC.LYMPHOMA
	from MIMICIII.icustays ICU, eli_complete_plus_summaries EMC
	where ICU.SUBJECT_ID = EMC.SUBJECT_ID and ICU.HADM_ID = EMC.HADM_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, EMC.CONGESTIVE_HEART_FAILURE, EMC.CARDIAC_ARRHYTHMIAS, EMC.valvular_disease, EMC.hypertension, EMC.diabetes_uncomplicated, EMC.diabetes_complicated, EMC.renal_failure, EMC.liver_disease, EMC.OBESITY, EMC.elixhauser_vanwalraven, EMC.elixhauser_SID29, EMC.elixhauser_SID30, EMC.SOLID_TUMOR, EMC.METASTATIC_CANCER, EMC.LYMPHOMA
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, EMC.CONGESTIVE_HEART_FAILURE, EMC.CARDIAC_ARRHYTHMIAS, EMC.valvular_disease, EMC.hypertension, EMC.diabetes_uncomplicated, EMC.diabetes_complicated, EMC.renal_failure, EMC.liver_disease, EMC.OBESITY, EMC.elixhauser_vanwalraven, EMC.elixhauser_SID29, EMC.elixhauser_SID30, EMC.SOLID_TUMOR, EMC.METASTATIC_CANCER, EMC.LYMPHOMA),


-- Extracting DURATION OF VASOPRESSORS for all the patients in the ICU

	-- This query extracts durations of vasopressor administration
	-- It groups together any administration of the below list of drugs:
	--  norepinephrine - 30047,30120,221906
	--  epinephrine - 30044,30119,30309,221289
	--  phenylephrine - 30127,30128,221749
	--  vasopressin - 30051,222315 (42273, 42802 also for 2 patients)
	--  dopamine - 30043,30307,221662
	--  dobutamine - 30042,30306,221653
	--  milrinone - 30125,221986

	-- Consecutive administrations are numbered 1, 2, ...
	-- Total time on the drug can be calculated from this table
	-- by grouping using ICUSTAY_ID

	-- select only the ITEMIDs from the inputevents_cv table related to vasopressors
	io_cv as
	(
	  select
	    icustay_id, charttime, itemid, stopped
	    -- ITEMIDs (42273, 42802) accidentally store rate in amount column
	    , case
	        when itemid in (42273, 42802)
	          then amount
	        else rate
	      end as rate
	    , case
	        when itemid in (42273, 42802)
	          then rate
	        else amount
	      end as amount
	  from mimiciii.inputevents_cv
	  where itemid in
	  (
	    30047,30120,30044,30119,30309,30127
	  , 30128,30051,30043,30307,30042,30306,30125
	  , 42273, 42802
	  )
	)
	-- select only the ITEMIDs from the inputevents_mv table related to vasopressors
	, io_mv as
	(
	  select
	    icustay_id, linkorderid, starttime, endtime
	  from mimiciii.inputevents_mv io
	  -- Subselect the vasopressor ITEMIDs
	  where itemid in
	  (
	  221906,221289,221749,222315,221662,221653,221986
	  )
	  and statusdescription != 'Rewritten' -- only valid orders
	)
	, vasocv1 as
	(
	  select
	    icustay_id, charttime, itemid
	    -- case statement determining whether the ITEMID is an instance of vasopressor usage
	    , 1 as vaso

	    -- the 'stopped' column indicates if a vasopressor has been disconnected
	    , max(case when stopped in ('Stopped','D/C''d') then 1
	          else 0 end) as vaso_stopped

	    , max(case when rate is not null then 1 else 0 end) as vaso_null
	    , max(rate) as vaso_rate
	    , max(amount) as vaso_amount

	  from io_cv
	  group by icustay_id, charttime, itemid
	)
	, vasocv2 as
	(
	  select v.*
	    , sum(vaso_null) over (partition by icustay_id, itemid order by charttime) as vaso_partition
	  from
	    vasocv1 v
	)
	, vasocv3 as
	(
	  select v.*
	    , first_value(vaso_rate) over (partition by icustay_id, itemid, vaso_partition order by charttime) as vaso_prevrate_ifnull
	  from
	    vasocv2 v
	)
	, vasocv4 as
	(
	select
	    icustay_id
	    , charttime
	    , itemid
	    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta

	    , vaso
	    , vaso_rate
	    , vaso_amount
	    , vaso_stopped
	    , vaso_prevrate_ifnull

	    -- We define start time here
	    , case
	        when vaso = 0 then null

	        -- if this is the first instance of the vasoactive drug
	        when vaso_rate > 0 and
	          LAG(vaso_prevrate_ifnull,1)
	          OVER
	          (
	          partition by icustay_id, itemid, vaso, vaso_null
	          order by charttime
	          )
	          is null
	          then 1

	        -- you often get a string of 0s
	        -- we decide not to set these as 1, just because it makes vasonum sequential
	        when vaso_rate = 0 and
	          LAG(vaso_prevrate_ifnull,1)
	          OVER
	          (
	          partition by icustay_id, itemid, vaso
	          order by charttime
	          )
	          = 0
	          then 0

	        -- sometimes you get a string of NULL, associated with 0 volumes
	        -- same reason as before, we decide not to set these as 1
	        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null
	        when vaso_prevrate_ifnull = 0 and
	          LAG(vaso_prevrate_ifnull,1)
	          OVER
	          (
	          partition by icustay_id, itemid, vaso
	          order by charttime
	          )
	          = 0
	          then 0

	        -- If the last recorded rate was 0, newvaso = 1
	        when LAG(vaso_prevrate_ifnull,1)
	          OVER
	          (
	          partition by icustay_id, itemid, vaso
	          order by charttime
	          ) = 0
	          then 1

	        -- If the last recorded vaso was D/C'd, newvaso = 1
	        when
	          LAG(vaso_stopped,1)
	          OVER
	          (
	          partition by icustay_id, itemid, vaso
	          order by charttime
	          )
	          = 1 then 1

	        -- ** not sure if the below is needed
	        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1
	      else null
	      end as vaso_start

	FROM
	  vasocv3
	)
	-- propagate start/stop flags forward in time
	, vasocv5 as
	(
	  select v.*
	    , SUM(vaso_start) OVER (partition by icustay_id, itemid, vaso order by charttime) as vaso_first
	FROM
	  vasocv4 v
	)
	, vasocv6 as
	(
	  select v.*
	    -- We define end time here
	    , case
	        when vaso = 0
	          then null

	        -- If the recorded vaso was D/C'd, this is an end time
	        when vaso_stopped = 1
	          then vaso_first

	        -- If the rate is zero, this is the end time
	        when vaso_rate = 0
	          then vaso_first

	        -- the last row in the table is always a potential end time
	        -- this captures patients who die/are discharged while on vasopressors
	        -- in principle, this could add an extra end time for the vasopressor
	        -- however, since we later group on vaso_start, any extra end times are ignored
	        when LEAD(CHARTTIME,1)
	          OVER
	          (
	          partition by icustay_id, itemid, vaso
	          order by charttime
	          ) is null
	          then vaso_first

	        else null
	        end as vaso_stop
	    from vasocv5 v
	)

	-- -- if you want to look at the results of the table before grouping:
	-- select
	--   icustay_id, charttime, vaso, vaso_rate, vaso_amount
	--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped
	--     , vaso_start
	--     , vaso_first
	--     , vaso_stop
	-- from vasocv6 order by charttime;


	, vasocv as
	(
	-- below groups together vasopressor administrations into groups
	select
	  icustay_id
	  , itemid
	  -- the first non-null rate is considered the starttime
	  , min(case when vaso_rate is not null then charttime else null end) as starttime
	  -- the *first* time the first/last flags agree is the stop time for this duration
	  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime
	from vasocv6
	where
	  vaso_first is not null -- bogus data
	and
	  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered
	and
	  icustay_id is not null -- there are data for "floating" admissions, we don't worry about these
	group by icustay_id, itemid, vaso_first
	having -- ensure start time is not the same as end time
	 min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)
	and
	  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery
	)
	-- we do not group by ITEMID in below query
	-- this is because we want to collapse all vasopressors together
	, vasocv_grp as
	(
	SELECT
	  s1.icustay_id,
	  s1.starttime,
	  MIN(t1.endtime) AS endtime
	FROM vasocv s1
	INNER JOIN vasocv t1
	  ON  s1.icustay_id = t1.icustay_id
	  AND s1.starttime <= t1.endtime
	  AND NOT EXISTS(SELECT * FROM vasocv t2
	                 WHERE t1.icustay_id = t2.icustay_id
	                 AND t1.endtime >= t2.starttime
	                 AND t1.endtime < t2.endtime)
	WHERE NOT EXISTS(SELECT * FROM vasocv s2
	                 WHERE s1.icustay_id = s2.icustay_id
	                 AND s1.starttime > s2.starttime
	                 AND s1.starttime <= s2.endtime)
	GROUP BY s1.icustay_id, s1.starttime
	ORDER BY s1.icustay_id, s1.starttime
	)
	-- now we extract the associated data for metavision patients
	-- do not need to group by itemid because we group by linkorderid
	, vasomv as
	(
	  select
	    icustay_id, linkorderid
	    , min(starttime) as starttime, max(endtime) as endtime
	  from io_mv
	  group by icustay_id, linkorderid
	)
	, vasomv_grp as
	(
	SELECT
	  s1.icustay_id,
	  s1.starttime,
	  MIN(t1.endtime) AS endtime
	FROM vasomv s1
	INNER JOIN vasomv t1
	  ON  s1.icustay_id = t1.icustay_id
	  AND s1.starttime <= t1.endtime
	  AND NOT EXISTS(SELECT * FROM vasomv t2
	                 WHERE t1.icustay_id = t2.icustay_id
	                 AND t1.endtime >= t2.starttime
	                 AND t1.endtime < t2.endtime)
	WHERE NOT EXISTS(SELECT * FROM vasomv s2
	                 WHERE s1.icustay_id = s2.icustay_id
	                 AND s1.starttime > s2.starttime
	                 AND s1.starttime <= s2.endtime)
	GROUP BY s1.icustay_id, s1.starttime
	ORDER BY s1.icustay_id, s1.starttime
	),

	vasoprassors_final_table AS(
	select
	  icustay_id
	  -- generate a sequential integer for convenience
	  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum
	  , starttime, endtime
	from
	  vasocv_grp

	UNION

	select
	  icustay_id
	  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum
	  , starttime, endtime
	from
	  vasomv_grp

	order by icustay_id, vasonum),

	vasopressors_final_sum AS (
	select ICUSTAY_ID, sum(extract(minute from endtime - starttime)) + sum(extract(hour from endtime - starttime))*60 + sum(extract(day from endtime - starttime))*1440 AS DURATION_VASOPRESSORS_MINUTES
	from vasoprassors_final_table
	group by ICUSTAY_ID
	),

	vasopressors_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, VFS.DURATION_VASOPRESSORS_MINUTES as DURATION_VASOPRESSORS_MINUTES
	from MIMICIII.ICUSTAYS ICU, vasopressors_final_sum VFS
	where ICU.ICUSTAY_ID = VFS.ICUSTAY_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, VFS.DURATION_VASOPRESSORS_MINUTES
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, VFS.DURATION_VASOPRESSORS_MINUTES),


-- Extracting DURATION OF MECHANICAL VENTILATION for all the patients in the ICU

	-- This query extracts the duration of mechanical ventilation
	-- The main goal of the query is to aggregate sequential ventilator settings
	-- into single mechanical ventilation "events". The start and end time of these
	-- events can then be used for various purposes: calculating the total duration
	-- of mechanical ventilation, cross-checking values (e.g. PaO2:FiO2 on vent), etc

	-- The query's logic is roughly:
	--    1) The presence of a mechanical ventilation setting starts a new ventilation event
	--    2) Any instance of a setting in the next 8 hours continues the event
	--    3) Certain elements end the current ventilation event
	--        a) documented extubation ends the current ventilation
	--        b) initiation of non-invasive vent and/or oxygen ends the current vent
	-- The ventilation events are numbered consecutively by the `num` column.


	-- First, create a temporary table to store relevant data from CHARTEVENTS.
	ventsettings AS (
	select
	  icustay_id, charttime
	  -- case statement determining whether it is an instance of mech vent
	  , max(
	    case
	      when itemid is null or value is null then 0 -- can't have null values
	      when itemid = 720 and value != 'Other/Remarks' THEN 1  -- VentTypeRecorded
	      when itemid = 223848 and value != 'Other' THEN 1
	      when itemid = 223849 then 1 -- ventilator mode
	      when itemid = 467 and value = 'Ventilator' THEN 1 -- O2 delivery device == ventilator
	      when itemid = 648 and value = 'Intubated/trach' THEN 1 -- Speech = intubated
	      when itemid = 223900 and value = 'No Response-ETT' THEN 1
	      when itemid in
	        (
	        445, 448, 449, 450, 1340, 1486, 1600, 224687 -- minute volume
	        , 639, 654, 681, 682, 683, 684,224685,224684,224686 -- tidal volume
	        , 218,436,535,444,459,224697,224695,224696,224746,224747 -- High/Low/Peak/Mean/Neg insp force ("RespPressure")
	        , 221,1,1211,1655,2000,226873,224738,224419,224750,227187 -- Insp pressure
	        , 543 -- PlateauPressure
	        , 5865,5866,224707,224709,224705,224706 -- APRV pressure
	        , 60,437,505,506,686,220339,224700 -- PEEP
	        , 3459 -- high pressure relief
	        , 501,502,503,224702 -- PCV
	        , 223,667,668,669,670,671,672 -- TCPCV
	        , 157,158,1852,3398,3399,3400,3401,3402,3403,3404,8382,227809,227810 -- ETT
	        , 224701 -- PSVlevel
	        )
	        THEN 1
	      else 0
	    end
	    ) as MechVent
	    , max(
	      case when itemid is null or value is null then 0
	        -- extubated indicates ventilation event has ended
	        when itemid = 640 and value = 'Extubated' then 1
	        when itemid = 640 and value = 'Self Extubation' then 1
	        -- initiation of oxygen therapy indicates the ventilation has ended
	        when itemid = 226732 and value in
	        (
	          'Nasal cannula', -- 153714 observations
	          'Face tent', -- 24601 observations
	          'Aerosol-cool', -- 24560 observations
	          'Trach mask ', -- 16435 observations
	          'High flow neb', -- 10785 observations
	          'Non-rebreather', -- 5182 observations
	          'Venti mask ', -- 1947 observations
	          'Medium conc mask ', -- 1888 observations
	          'T-piece', -- 1135 observations
	          'High flow nasal cannula', -- 925 observations
	          'Ultrasonic neb', -- 9 observations
	          'Vapomist' -- 3 observations
	        ) then 1
	        when itemid = 467 and value in
	        (
	          'Cannula', -- 278252 observations
	          'Nasal Cannula', -- 248299 observations
	          'None', -- 95498 observations
	          'Face Tent', -- 35766 observations
	          'Aerosol-Cool', -- 33919 observations
	          'Trach Mask', -- 32655 observations
	          'Hi Flow Neb', -- 14070 observations
	          'Non-Rebreather', -- 10856 observations
	          'Venti Mask', -- 4279 observations
	          'Medium Conc Mask', -- 2114 observations
	          'Vapotherm', -- 1655 observations
	          'T-Piece', -- 779 observations
	          'Hood', -- 670 observations
	          'Hut', -- 150 observations
	          'TranstrachealCat', -- 78 observations
	          'Heated Neb', -- 37 observations
	          'Ultrasonic Neb' -- 2 observations
	        ) then 1
	      else 0
	      end
	      )
	      as Extubated
	    , max(
	      case when itemid is null or value is null then 0
	        when itemid = 640 and value = 'Self Extubation' then 1
	      else 0
	      end
	      )
	      as SelfExtubated
	from mimiciii.chartevents ce
	where ce.value is not null
	-- exclude rows marked as error
	and ce.error IS DISTINCT FROM 1
	and itemid in
	(
	    -- the below are settings used to indicate ventilation
	      648, 223900 -- speech
	    , 720, 223849 -- vent mode
	    , 223848 -- vent type
	    , 445, 448, 449, 450, 1340, 1486, 1600, 224687 -- minute volume
	    , 639, 654, 681, 682, 683, 684,224685,224684,224686 -- tidal volume
	    , 218,436,535,444,224697,224695,224696,224746,224747 -- High/Low/Peak/Mean ("RespPressure")
	    , 221,1,1211,1655,2000,226873,224738,224419,224750,227187 -- Insp pressure
	    , 543 -- PlateauPressure
	    , 5865,5866,224707,224709,224705,224706 -- APRV pressure
	    , 60,437,505,506,686,220339,224700 -- PEEP
	    , 3459 -- high pressure relief
	    , 501,502,503,224702 -- PCV
	    , 223,667,668,669,670,671,672 -- TCPCV
	    , 157,158,1852,3398,3399,3400,3401,3402,3403,3404,8382,227809,227810 -- ETT
	    , 224701 -- PSVlevel

	    -- the below are settings used to indicate extubation
	    , 640 -- extubated

	    -- the below indicate oxygen/NIV, i.e. the end of a mechanical vent event
	    , 468 -- O2 Delivery Device#2
	    , 469 -- O2 Delivery Mode
	    , 470 -- O2 Flow (lpm)
	    , 471 -- O2 Flow (lpm) #2
	    , 227287 -- O2 Flow (additional cannula)
	    , 226732 -- O2 Delivery Device(s)
	    , 223834 -- O2 Flow

	    -- used in both oxygen + vent calculation
	    , 467 -- O2 Delivery Device
	)
	group by icustay_id, charttime
	UNION
	-- add in the extubation flags from procedureevents_mv
	-- note that we only need the start time for the extubation
	-- (extubation is always charted as ending 1 minute after it started)
	select
	  icustay_id, starttime as charttime
	  , 0 as MechVent
	  , 1 as Extubated
	  , case when itemid = 225468 then 1 else 0 end as SelfExtubated
	from mimiciii.procedureevents_mv
	where itemid in
	(
	  227194 -- "Extubation"
	, 225468 -- "Unplanned Extubation (patient-initiated)"
	, 225477 -- "Unplanned Extubation (non-patient initiated)"
	)),


	ventdurations as (
	-- create the durations for each mechanical ventilation instance
	select icustay_id, ventnum
	  , min(charttime) as starttime
	  , max(charttime) as endtime
	  , extract(epoch from max(charttime)-min(charttime))/60/60 AS duration_hours
	from
	(
	  select vd1.*
	  -- create a cumulative sum of the instances of new ventilation
	  -- this results in a monotonic integer assigned to each instance of ventilation
	  , case when MechVent=1 or Extubated = 1 then
	      SUM( newvent )
	      OVER ( partition by icustay_id order by charttime )
	    else null end
	    as ventnum
	  --- now we convert CHARTTIME of ventilator settings into durations
	  from ( -- vd1
	      select
	          icustay_id
	          -- this carries over the previous charttime which had a mechanical ventilation event
	          , case
	              when MechVent=1 then
	                LAG(CHARTTIME, 1) OVER (partition by icustay_id, MechVent order by charttime)
	              else null
	            end as charttime_lag
	          , charttime
	          , MechVent
	          , Extubated
	          , SelfExtubated

	          -- if this is a mechanical ventilation event, we calculate the time since the last event
	          , case
	              -- if the current observation indicates mechanical ventilation is present
	              when MechVent=1 then
	              -- copy over the previous charttime where mechanical ventilation was present
	                CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, MechVent order by charttime))
	              else null
	            end as ventduration

	          -- now we determine if the current mech vent event is a "new", i.e. they've just been intubated
	          , case
	            -- if there is an extubation flag, we mark any subsequent ventilation as a new ventilation event
	              when Extubated = 1 then 0 -- extubation is *not* a new ventilation event, the *subsequent* row is
	              when
	                LAG(Extubated,1)
	                OVER
	                (
	                partition by icustay_id, case when MechVent=1 or Extubated=1 then 1 else 0 end
	                order by charttime
	                )
	                = 1 then 1
	                -- if there is less than 8 hours between vent settings, we do not treat this as a new ventilation event
	              when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, MechVent order by charttime))) <= interval '8' hour
	                then 0
	            else 1
	            end as newvent
	      -- use the staging table with only vent settings from chart events
	      FROM ventsettings
	  ) AS vd1
	  -- now we can isolate to just rows with ventilation settings/extubation settings
	  -- (before we had rows with extubation flags)
	  -- this removes any null values for newvent
	  where
	    (MechVent = 1 or Extubated = 1)
	) AS vd2
	-- exclude the "0th" occurence of mech vent
	-- this is usually NIV/oxygen, which is our surrogate for extubation,
	-- occurring before the actual mechvent event
	where ventnum > 0
	group by icustay_id, ventnum
	order by icustay_id, ventnum),

	ventilation_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, round(sum(VTD.duration_hours)*60) as DURATION_VENTILATION_MINUTES
	from MIMICIII.ICUSTAYS ICU, ventdurations VTD
	where ICU.ICUSTAY_ID = VTD.ICUSTAY_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID),


-- Extracting OASIS for all the patients in the ICU

	-- ------------------------------------------------------------------
	-- Title: Oxford Acute Severity of Illness Score (OASIS)
	-- This query extracts the Oxford acute severity of illness score.
	-- This score is a measure of severity of illness for patients in the ICU.
	-- The score is calculated on the first day of each ICU patients' stay.
	-- ------------------------------------------------------------------

	-- Reference for OASIS:
	--    Johnson, Alistair EW, Andrew A. Kramer, and Gari D. Clifford.
	--    "A new severity of illness scale using a subset of acute physiology and chronic health evaluation data elements shows comparable predictive accuracy*."
	--    Critical care medicine 41, no. 7 (2013): 1711-1718.

	-- Variables used in OASIS:
	--  Heart rate, GCS, MAP, Temperature, Respiratory rate, Ventilation status (sourced from CHARTEVENTS)
	--  Urine output (sourced from OUTPUTEVENTS)
	--  Elective surgery (sourced from ADMISSIONS and SERVICES)
	--  Pre-ICU in-hospital length of stay (sourced from ADMISSIONS and ICUSTAYS)
	--  Age (sourced from PATIENTS)

	-- The following views are required to run this query:
	--  1) uofirstday - generated by urine-output-first-day.sql
	--  2) ventfirstday - generated by ventilated-first-day.sql
	--  3) vitalsfirstday - generated by vitals-first-day.sql
	--  4) gcsfirstday - generated by gcs-first-day.sql


	-- Regarding missing values:
	--  The ventilation flag is always 0/1. It cannot be missing, since VENT=0 if no data is found for vent settings.

	-- Note:
	--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.
	--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.

	surgflag as
	(
	  select ie.icustay_id
	    , max(case
	        when lower(curr_service) like '%surg%' then 1
	        when curr_service = 'ORTHO' then 1
	    else 0 end) as surgical
	  from mimiciii.icustays ie
	  left join mimiciii.services se
	    on ie.hadm_id = se.hadm_id
	    and se.transfertime < ie.intime + interval '1' day
	  group by ie.icustay_id
	)
	, cohort as
	(
	select ie.subject_id, ie.hadm_id, ie.icustay_id
	      , ie.intime
	      , ie.outtime
	      , adm.deathtime
	      , cast(ie.intime as timestamp) - cast(adm.admittime as timestamp) as PreICULOS
	      , floor( ( cast(ie.intime as date) - cast(pat.dob as date) ) / 365.242 ) as age
	      , gcs.mingcs
	      , vital.heartrate_max
	      , vital.heartrate_min
	      , vital.meanbp_max
	      , vital.meanbp_min
	      , vital.resprate_max
	      , vital.resprate_min
	      , vital.tempc_max
	      , vital.tempc_min
	      , vent.mechvent
	      , uo.urineoutput

	      , case
	          when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1
	            then 1
	          when adm.ADMISSION_TYPE is null or sf.surgical is null
	            then null
	          else 0
	        end as ElectiveSurgery

	      -- age group
	      , case
	        when ( ( cast(ie.intime as date) - cast(pat.dob as date) ) / 365.242 ) <= 1 then 'neonate'
	        when ( ( cast(ie.intime as date) - cast(pat.dob as date) ) / 365.242 ) <= 15 then 'middle'
	        else 'adult' end as ICUSTAY_AGE_GROUP

	      -- mortality flags
	      , case
	          when adm.deathtime between ie.intime and ie.outtime
	            then 1
	          when adm.deathtime <= ie.intime -- sometimes there are typographical errors in the death date
	            then 1
	          when adm.dischtime <= ie.outtime and adm.discharge_location = 'DEAD/EXPIRED'
	            then 1
	          else 0 end
	        as ICUSTAY_EXPIRE_FLAG
	      , adm.hospital_expire_flag
	from mimiciii.icustays ie
	inner join mimiciii.admissions adm
	  on ie.hadm_id = adm.hadm_id
	inner join mimiciii.patients pat
	  on ie.subject_id = pat.subject_id
	left join surgflag sf
	  on ie.icustay_id = sf.icustay_id
	-- join to custom tables to get more data....
	left join gcsfirstday gcs
	  on ie.icustay_id = gcs.icustay_id
	left join vitalsfirstday vital
	  on ie.icustay_id = vital.icustay_id
	left join uofirstday uo
	  on ie.icustay_id = uo.icustay_id
	left join ventfirstday vent
	  on ie.icustay_id = vent.icustay_id
	)
	, scorecomp as
	(
	select co.subject_id, co.hadm_id, co.icustay_id
	, co.ICUSTAY_AGE_GROUP
	, co.icustay_expire_flag
	, co.hospital_expire_flag

	-- Below code calculates the component scores needed for OASIS
	, case when preiculos is null then null
	     when preiculos < '0 0:10:12' then 5
	     when preiculos < '0 4:57:00' then 3
	     when preiculos < '1 0:00:00' then 0
	     when preiculos < '12 23:48:00' then 1
	     else 2 end as preiculos_score
	,  case when age is null then null
	      when age < 24 then 0
	      when age <= 53 then 3
	      when age <= 77 then 6
	      when age <= 89 then 9
	      when age >= 90 then 7
	      else 0 end as age_score
	,  case when mingcs is null then null
	      when mingcs <= 7 then 10
	      when mingcs < 14 then 4
	      when mingcs = 14 then 3
	      else 0 end as gcs_score
	,  case when heartrate_max is null then null
	      when heartrate_max > 125 then 6
	      when heartrate_min < 33 then 4
	      when heartrate_max >= 107 and heartrate_max <= 125 then 3
	      when heartrate_max >= 89 and heartrate_max <= 106 then 1
	      else 0 end as heartrate_score
	,  case when meanbp_min is null then null
	      when meanbp_min < 20.65 then 4
	      when meanbp_min < 51 then 3
	      when meanbp_max > 143.44 then 3
	      when meanbp_min >= 51 and meanbp_min < 61.33 then 2
	      else 0 end as meanbp_score
	,  case when resprate_min is null then null
	      when resprate_min <   6 then 10
	      when resprate_max >  44 then  9
	      when resprate_max >  30 then  6
	      when resprate_max >  22 then  1
	      when resprate_min <  13 then 1 else 0
	      end as resprate_score
	,  case when tempc_max is null then null
	      when tempc_max > 39.88 then 6
	      when tempc_min >= 33.22 and tempc_min <= 35.93 then 4
	      when tempc_max >= 33.22 and tempc_max <= 35.93 then 4
	      when tempc_min < 33.22 then 3
	      when tempc_min > 35.93 and tempc_min <= 36.39 then 2
	      when tempc_max >= 36.89 and tempc_max <= 39.88 then 2
	      else 0 end as temp_score
	,  case when UrineOutput is null then null
	      when UrineOutput < 671.09 then 10
	      when UrineOutput > 6896.80 then 8
	      when UrineOutput >= 671.09
	       and UrineOutput <= 1426.99 then 5
	      when UrineOutput >= 1427.00
	       and UrineOutput <= 2544.14 then 1
	      else 0 end as UrineOutput_score
	,  case when mechvent is null then null
	      when mechvent = 1 then 9
	      else 0 end as mechvent_score
	,  case when ElectiveSurgery is null then null
	      when ElectiveSurgery = 1 then 0
	      else 6 end as electivesurgery_score


	-- The below code gives the component associated with each score
	-- This is not needed to calculate OASIS, but provided for user convenience.
	-- If both the min/max are in the normal range (score of 0), then the average value is stored.
	, preiculos
	, age
	, mingcs as gcs
	,  case when heartrate_max is null then null
	      when heartrate_max > 125 then heartrate_max
	      when heartrate_min < 33 then heartrate_min
	      when heartrate_max >= 107 and heartrate_max <= 125 then heartrate_max
	      when heartrate_max >= 89 and heartrate_max <= 106 then heartrate_max
	      else (heartrate_min+heartrate_max)/2 end as heartrate
	,  case when meanbp_min is null then null
	      when meanbp_min < 20.65 then meanbp_min
	      when meanbp_min < 51 then meanbp_min
	      when meanbp_max > 143.44 then meanbp_max
	      when meanbp_min >= 51 and meanbp_min < 61.33 then meanbp_min
	      else (meanbp_min+meanbp_max)/2 end as meanbp
	,  case when resprate_min is null then null
	      when resprate_min <   6 then resprate_min
	      when resprate_max >  44 then resprate_max
	      when resprate_max >  30 then resprate_max
	      when resprate_max >  22 then resprate_max
	      when resprate_min <  13 then resprate_min
	      else (resprate_min+resprate_max)/2 end as resprate
	,  case when tempc_max is null then null
	      when tempc_max > 39.88 then tempc_max
	      when tempc_min >= 33.22 and tempc_min <= 35.93 then tempc_min
	      when tempc_max >= 33.22 and tempc_max <= 35.93 then tempc_max
	      when tempc_min < 33.22 then tempc_min
	      when tempc_min > 35.93 and tempc_min <= 36.39 then tempc_min
	      when tempc_max >= 36.89 and tempc_max <= 39.88 then tempc_max
	      else (tempc_min+tempc_max)/2 end as temp
	,  UrineOutput
	,  mechvent
	,  ElectiveSurgery
	from cohort co
	)
	, score as
	(
	select s.*
	    , coalesce(age_score,0)
	    + coalesce(preiculos_score,0)
	    + coalesce(gcs_score,0)
	    + coalesce(heartrate_score,0)
	    + coalesce(meanbp_score,0)
	    + coalesce(resprate_score,0)
	    + coalesce(temp_score,0)
	    + coalesce(urineoutput_score,0)
	    + coalesce(mechvent_score,0)
	    + coalesce(electivesurgery_score,0)
	    as OASIS
	from scorecomp s),

	oasis_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, OSS.OASIS as OASIS_SCORE
	from MIMICIII.ICUSTAYS ICU, score OSS
	where ICU.SUBJECT_ID = OSS.SUBJECT_ID and ICU.HADM_ID = OSS.HADM_ID and ICU.ICUSTAY_ID = OSS.ICUSTAY_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
		and OSS.OASIS is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, OSS.OASIS
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, OSS.OASIS),


-- Extracting APS III for all the patients in the ICU

	-- ------------------------------------------------------------------
	-- Title: Acute Physiology Score III (APS III)
	-- This query extracts the acute physiology score III.
	-- This score is a measure of patient severity of illness.
	-- The score is calculated on the first day of each ICU patients' stay.
	-- ------------------------------------------------------------------

	-- Reference for APS III:
	--    Knaus WA, Wagner DP, Draper EA, Zimmerman JE, Bergner M, Bastos PG, Sirio CA, Murphy DJ, Lotring T, Damiano A.
	--    The APACHE III prognostic system. Risk prediction of hospital mortality for critically ill hospitalized adults.
	--    Chest Journal. 1991 Dec 1;100(6):1619-36.

	-- Reference for the equation for calibrating APS III to hospital mortality:
	--    Johnson, A. E. W. (2015). Mortality prediction and acuity assessment in critical care.
	--    University of Oxford, Oxford, UK.

	-- Variables used in APS III:
	--  GCS
	--  VITALS: Heart rate, mean blood pressure, temperature, respiration rate
	--  FLAGS: ventilation/cpap, chronic dialysis
	--  IO: urine output
	--  LABS: PaO2, A-aDO2, hematocrit, WBC, creatinine
	--        , blood urea nitrogen, sodium, albumin, bilirubin, glucose, pH, pCO2

	-- The following views are required to run this query:
	--  1) uofirstday - generated by urine-output-first-day.sql
	--  2) ventfirstday - generated by ventilated-first-day.sql
	--  3) vitalsfirstday - generated by vitals-first-day.sql
	--  4) gcsfirstday - generated by gcs-first-day.sql
	--  5) labsfirstday - generated by labs-first-day.sql

	-- Note:
	--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.
	--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.

	-- List of TODO:
	-- The site of temperature is not incorporated. Axillary measurements should be increased by 1 degree.
	-- Unfortunately the data for metavision is not available at the moment.
	--  674 | Temp. Site
	--  224642 | Temperature Site

	bg as
	(
	  -- join blood gas to ventilation durations to determine if patient was vent
	  -- also join to cpap table for the same purpose
	  select bg.icustay_id, bg.charttime
	  , PO2 as PaO2
	  , AADO2
	  
	  from bloodgasfirstday bg
	  left join ventdurations vd
	    on bg.icustay_id = vd.icustay_id
	    and bg.charttime >= vd.starttime
	    and bg.charttime <= vd.endtime
	)
	-- because ph/pco2 rules are an interaction *within* a blood gas, we calculate them here
	-- the worse score is then taken for the final calculation
	, acidbase as
	(
	  select bg.icustay_id
	  , ph, pco2 as PACO2
	  , case
	      when ph is null or pco2 is null then null
	      when ph < 7.20 then
	        case
	          when pco2 < 50 then 12
	          else 4
	        end
	      when ph < 7.30 then
	        case
	          when pco2 < 30 then 9
	          when pco2 < 40 then 6
	          when pco2 < 50 then 3
	          else 2
	        end
	      when ph < 7.35 then
	        case
	          when pco2 < 30 then 9
	          when pco2 < 45 then 0
	          else 1
	        end
	      when ph < 7.45 then
	        case
	          when pco2 < 30 then 5
	          when pco2 < 45 then 0
	          else 1
	        end
	      when ph < 7.50 then
	        case
	          when pco2 < 30 then 5
	          when pco2 < 35 then 0
	          when pco2 < 45 then 2
	          else 12
	        end
	      when ph < 7.60 then
	        case
	          when pco2 < 40 then 3
	          else 12
	        end
	      else -- ph >= 7.60
	        case
	          when pco2 < 25 then 0
	          when pco2 < 40 then 3
	          else 12
	        end
	    end as acidbase_score
	  from bloodgasfirstday bg
	  where ph is not null and pco2 is not null
	)
	, acidbase_max as
	(
	  select icustay_id, acidbase_score, ph, paco2
	    -- create integer which indexes maximum value of score with 1
	  , case
	      when ph is not null and paco2 is not null
	        then ROW_NUMBER() over (partition by ICUSTAY_ID ORDER BY ACIDBASE_SCORE DESC)
	      else null
	    end as acidbase_rn
	  from acidbase
	)
	-- define acute renal failure (ARF) as:
	--  creatinine >=1.5 mg/dl
	--  and urine output <410 cc/day
	--  and no chronic dialysis
	, arf as
	(
	  select ie.icustay_id
	    , case
	        when labs.creatinine_max >= 1.5
	        and  uo.urineoutput < 410
	        -- acute renal failure is only coded if the patient is not on chronic dialysis
	        -- we use ICD-9 coding of ESRD as a proxy for chronic dialysis
	        and  icd.ckd = 0
	          then 1
	      else 0 end as arf
	  from mimiciii.icustays ie
	  left join uofirstday uo
	    on ie.icustay_id = uo.icustay_id
	  left join labsfirstday labs
	    on ie.icustay_id = labs.icustay_id
	  left join
	  (
	    select hadm_id
	      , max(case
	          -- severe kidney failure requiring use of dialysis
	          when icd9_code in  ('5854','5855','5856') then 1
	          -- we do not include 5859 as that is sometimes coded for acute-on-chronic ARF
	        else 0 end)
	      as ckd
	    from mimiciii.diagnoses_icd
	    group by hadm_id
	  ) icd
	    on ie.hadm_id = icd.hadm_id
	)
	, cohort_second as
	(
	select ie.subject_id, ie.hadm_id, ie.icustay_id
	      , ie.intime
	      , ie.outtime

	      , vital.heartrate_min
	      , vital.heartrate_max
	      , vital.meanbp_min
	      , vital.meanbp_max
	      , vital.tempc_min
	      , vital.tempc_max
	      , vital.resprate_min
	      , vital.resprate_max
	      , ab.ph
	      , ab.paco2
	      , ab.acidbase_score

	      , labs.hematocrit_min
	      , labs.hematocrit_max
	      , labs.wbc_min
	      , labs.wbc_max
	      , labs.creatinine_min
	      , labs.creatinine_max
	      , labs.bun_min
	      , labs.bun_max
	      , labs.sodium_min
	      , labs.sodium_max
	      , labs.albumin_min
	      , labs.albumin_max
	      , labs.bilirubin_min
	      , labs.bilirubin_max

	      , case
	          when labs.glucose_max is null and vital.glucose_max is null
	            then null
	          when labs.glucose_max is null or vital.glucose_max > labs.glucose_max
	            then vital.glucose_max
	          when vital.glucose_max is null or labs.glucose_max > vital.glucose_max
	            then labs.glucose_max
	          else labs.glucose_max -- if equal, just pick labs
	        end as glucose_max

	      , case
	          when labs.glucose_min is null and vital.glucose_min is null
	            then null
	          when labs.glucose_min is null or vital.glucose_min < labs.glucose_min
	            then vital.glucose_min
	          when vital.glucose_min is null or labs.glucose_min < vital.glucose_min
	            then labs.glucose_min
	          else labs.glucose_min -- if equal, just pick labs
	        end as glucose_min

	      -- , labs.bicarbonate_min
	      -- , labs.bicarbonate_max
	      , vent.mechvent as vent
	      , uo.urineoutput
	      -- gcs and its components
	      , gcs.mingcs
	      , gcs.gcsmotor, gcs.gcsverbal,  gcs.gcseyes, gcs.endotrachflag
	      -- acute renal failure
	      , arf.arf as arf

	from mimiciii.icustays ie
	inner join mimiciii.admissions adm
	  on ie.hadm_id = adm.hadm_id
	inner join mimiciii.patients pat
	  on ie.subject_id = pat.subject_id

	-- join to above views - the row number filters to 1 row per ICUSTAY_ID
	left join acidbase_max ab
	  on  ie.icustay_id = ab.icustay_id
	  and ab.acidbase_rn = 1
	left join arf
	  on ie.icustay_id = arf.icustay_id

	-- join to custom tables to get more data....
	left join ventfirstday vent
	  on ie.icustay_id = vent.icustay_id
	left join gcsfirstday gcs
	  on ie.icustay_id = gcs.icustay_id
	left join vitalsfirstday vital
	  on ie.icustay_id = vital.icustay_id
	left join uofirstday uo
	  on ie.icustay_id = uo.icustay_id
	left join labsfirstday labs
	  on ie.icustay_id = labs.icustay_id
	)
	-- First, we calculate the score for the minimum values
	, score_min as
	(
	  select cohort_second.subject_id, cohort_second.hadm_id, cohort_second.icustay_id
	  , case
	      when heartrate_min is null then null
	      when heartrate_min <   40 then 8
	      when heartrate_min <   50 then 5
	      when heartrate_min <  100 then 0
	      when heartrate_min <  110 then 1
	      when heartrate_min <  120 then 5
	      when heartrate_min <  140 then 7
	      when heartrate_min <  155 then 13
	      when heartrate_min >= 155 then 17
	    end as hr_score

	  , case
	      when meanbp_min is null then null
	      when meanbp_min <   40 then 23
	      when meanbp_min <   60 then 15
	      when meanbp_min <   70 then 7
	      when meanbp_min <   80 then 6
	      when meanbp_min <  100 then 0
	      when meanbp_min <  120 then 4
	      when meanbp_min <  130 then 7
	      when meanbp_min <  140 then 9
	      when meanbp_min >= 140 then 10
	    end as meanbp_score

	  -- TODO: add 1 degree to axillary measurements
	  , case
	      when tempc_min is null then null
	      when tempc_min <  33.0 then 20
	      when tempc_min <  33.5 then 16
	      when tempc_min <  34.0 then 13
	      when tempc_min <  35.0 then 8
	      when tempc_min <  36.0 then 2
	      when tempc_min <  40.0 then 0
	      when tempc_min >= 40.0 then 4
	    end as temp_score

	  , case
	      when resprate_min is null then null
	      -- special case for ventilated patients
	      when vent = 1 and resprate_min < 14 then 0
	      when resprate_min <   6 then 17
	      when resprate_min <  12 then 8
	      when resprate_min <  14 then 7
	      when resprate_min <  25 then 0
	      when resprate_min <  35 then 6
	      when resprate_min <  40 then 9
	      when resprate_min <  50 then 11
	      when resprate_min >= 50 then 18
	    end as resprate_score

	  , case
	      when hematocrit_min is null then null
	      when hematocrit_min <   41.0 then 3
	      when hematocrit_min <   50.0 then 0
	      when hematocrit_min >=  50.0 then 3
	    end as hematocrit_score

	  , case
	      when wbc_min is null then null
	      when wbc_min <   1.0 then 19
	      when wbc_min <   3.0 then 5
	      when wbc_min <  20.0 then 0
	      when wbc_min <  25.0 then 1
	      when wbc_min >= 25.0 then 5
	    end as wbc_score

	  , case
	      when creatinine_min is null then null
	      when arf = 1 and creatinine_min <  1.5 then 0
	      when arf = 1 and creatinine_min >= 1.5 then 10
	      when creatinine_min <   0.5 then 3
	      when creatinine_min <   1.5 then 0
	      when creatinine_min <  1.95 then 4
	      when creatinine_min >= 1.95 then 7
	    end as creatinine_score

	  , case
	      when bun_min is null then null
	      when bun_min <  17.0 then 0
	      when bun_min <  20.0 then 2
	      when bun_min <  40.0 then 7
	      when bun_min <  80.0 then 11
	      when bun_min >= 80.0 then 12
	    end as bun_score

	  , case
	      when sodium_min is null then null
	      when sodium_min <  120 then 3
	      when sodium_min <  135 then 2
	      when sodium_min <  155 then 0
	      when sodium_min >= 155 then 4
	    end as sodium_score

	  , case
	      when albumin_min is null then null
	      when albumin_min <  2.0 then 11
	      when albumin_min <  2.5 then 6
	      when albumin_min <  4.5 then 0
	      when albumin_min >= 4.5 then 4
	    end as albumin_score

	  , case
	      when bilirubin_min is null then null
	      when bilirubin_min <  2.0 then 0
	      when bilirubin_min <  3.0 then 5
	      when bilirubin_min <  5.0 then 6
	      when bilirubin_min <  8.0 then 8
	      when bilirubin_min >= 8.0 then 16
	    end as bilirubin_score

	  , case
	      when glucose_min is null then null
	      when glucose_min <   40 then 8
	      when glucose_min <   60 then 9
	      when glucose_min <  200 then 0
	      when glucose_min <  350 then 3
	      when glucose_min >= 350 then 5
	    end as glucose_score

	from cohort_second
	)
	, score_max as
	(
	  select cohort_second.subject_id, cohort_second.hadm_id, cohort_second.icustay_id
	    , case
	        when heartrate_max is null then null
	        when heartrate_max <   40 then 8
	        when heartrate_max <   50 then 5
	        when heartrate_max <  100 then 0
	        when heartrate_max <  110 then 1
	        when heartrate_max <  120 then 5
	        when heartrate_max <  140 then 7
	        when heartrate_max <  155 then 13
	        when heartrate_max >= 155 then 17
	      end as hr_score

	    , case
	        when meanbp_max is null then null
	        when meanbp_max <   40 then 23
	        when meanbp_max <   60 then 15
	        when meanbp_max <   70 then 7
	        when meanbp_max <   80 then 6
	        when meanbp_max <  100 then 0
	        when meanbp_max <  120 then 4
	        when meanbp_max <  130 then 7
	        when meanbp_max <  140 then 9
	        when meanbp_max >= 140 then 10
	      end as meanbp_score

	    -- TODO: add 1 degree to axillary measurements
	    , case
	        when tempc_max is null then null
	        when tempc_max <  33.0 then 20
	        when tempc_max <  33.5 then 16
	        when tempc_max <  34.0 then 13
	        when tempc_max <  35.0 then 8
	        when tempc_max <  36.0 then 2
	        when tempc_max <  40.0 then 0
	        when tempc_max >= 40.0 then 4
	      end as temp_score

	    , case
	        when resprate_max is null then null
	        -- special case for ventilated patients
	        when vent = 1 and resprate_max < 14 then 0
	        when resprate_max <   6 then 17
	        when resprate_max <  12 then 8
	        when resprate_max <  14 then 7
	        when resprate_max <  25 then 0
	        when resprate_max <  35 then 6
	        when resprate_max <  40 then 9
	        when resprate_max <  50 then 11
	        when resprate_max >= 50 then 18
	      end as resprate_score

	    , case
	        when hematocrit_max is null then null
	        when hematocrit_max <   41.0 then 3
	        when hematocrit_max <   50.0 then 0
	        when hematocrit_max >=  50.0 then 3
	      end as hematocrit_score

	    , case
	        when wbc_max is null then null
	        when wbc_max <   1.0 then 19
	        when wbc_max <   3.0 then 5
	        when wbc_max <  20.0 then 0
	        when wbc_max <  25.0 then 1
	        when wbc_max >= 25.0 then 5
	      end as wbc_score

	    , case
	        when creatinine_max is null then null
	        when arf = 1 and creatinine_max <  1.5 then 0
	        when arf = 1 and creatinine_max >= 1.5 then 10
	        when creatinine_max <   0.5 then 3
	        when creatinine_max <   1.5 then 0
	        when creatinine_max <  1.95 then 4
	        when creatinine_max >= 1.95 then 7
	      end as creatinine_score

	    , case
	        when bun_max is null then null
	        when bun_max <  17.0 then 0
	        when bun_max <  20.0 then 2
	        when bun_max <  40.0 then 7
	        when bun_max <  80.0 then 11
	        when bun_max >= 80.0 then 12
	      end as bun_score

	    , case
	        when sodium_max is null then null
	        when sodium_max <  120 then 3
	        when sodium_max <  135 then 2
	        when sodium_max <  155 then 0
	        when sodium_max >= 155 then 4
	      end as sodium_score

	    , case
	        when albumin_max is null then null
	        when albumin_max <  2.0 then 11
	        when albumin_max <  2.5 then 6
	        when albumin_max <  4.5 then 0
	        when albumin_max >= 4.5 then 4
	      end as albumin_score

	    , case
	        when bilirubin_max is null then null
	        when bilirubin_max <  2.0 then 0
	        when bilirubin_max <  3.0 then 5
	        when bilirubin_max <  5.0 then 6
	        when bilirubin_max <  8.0 then 8
	        when bilirubin_max >= 8.0 then 16
	      end as bilirubin_score

	    , case
	        when glucose_max is null then null
	        when glucose_max <   40 then 8
	        when glucose_max <   60 then 9
	        when glucose_max <  200 then 0
	        when glucose_max <  350 then 3
	        when glucose_max >= 350 then 5
	      end as glucose_score

	from cohort_second
	)
	-- Combine together the scores for min/max, using the following rules:
	--  1) select the value furthest from a predefined normal value
	--  2) if both equidistant, choose the one which gives a worse score
	--  3) calculate score for acid-base abnormalities as it requires interactions
	-- sometimes the code is a bit redundant, i.e. we know the max would always be furthest from 0
	, scorecomp_second as
	(
	  select co.*
	  -- The rules for APS III require the definition of a "worst" value
	  -- This value is defined as whatever value is furthest from a predefined normal
	  -- e.g., for heart rate, worst is defined as furthest from 75
	  , case
	      when heartrate_max is null then null
	      when abs(heartrate_max-75) > abs(heartrate_min-75)
	        then smax.hr_score
	      when abs(heartrate_max-75) < abs(heartrate_min-75)
	        then smin.hr_score
	      when abs(heartrate_max-75) = abs(heartrate_min-75)
	      and  smax.hr_score >= smin.hr_score
	        then smax.hr_score
	      when abs(heartrate_max-75) = abs(heartrate_min-75)
	      and  smax.hr_score < smin.hr_score
	        then smin.hr_score
	    end as hr_score

	  , case
	      when meanbp_max is null then null
	      when abs(meanbp_max-90) > abs(meanbp_min-90)
	        then smax.meanbp_score
	      when abs(meanbp_max-90) < abs(meanbp_min-90)
	        then smin.meanbp_score
	      -- values are equidistant - pick the larger score
	      when abs(meanbp_max-90) = abs(meanbp_min-90)
	      and  smax.meanbp_score >= smin.meanbp_score
	        then smax.meanbp_score
	      when abs(meanbp_max-90) = abs(meanbp_min-90)
	      and  smax.meanbp_score < smin.meanbp_score
	        then smin.meanbp_score
	    end as meanbp_score

	  , case
	      when tempc_max is null then null
	      when abs(tempc_max-38) > abs(tempc_min-38)
	        then smax.temp_score
	      when abs(tempc_max-38) < abs(tempc_min-38)
	        then smin.temp_score
	      -- values are equidistant - pick the larger score
	      when abs(tempc_max-38) = abs(tempc_min-38)
	      and  smax.temp_score >= smin.temp_score
	        then smax.temp_score
	      when abs(tempc_max-38) = abs(tempc_min-38)
	      and  smax.temp_score < smin.temp_score
	        then smin.temp_score
	    end as temp_score

	  , case
	      when resprate_max is null then null
	      when abs(resprate_max-19) > abs(resprate_min-19)
	        then smax.resprate_score
	      when abs(resprate_max-19) < abs(resprate_min-19)
	        then smin.resprate_score
	      -- values are equidistant - pick the larger score
	      when abs(resprate_max-19) = abs(resprate_max-19)
	      and  smax.resprate_score >= smin.resprate_score
	        then smax.resprate_score
	      when abs(resprate_max-19) = abs(resprate_max-19)
	      and  smax.resprate_score < smin.resprate_score
	        then smin.resprate_score
	    end as resprate_score

	  , case
	      when hematocrit_max is null then null
	      when abs(hematocrit_max-45.5) > abs(hematocrit_min-45.5)
	        then smax.hematocrit_score
	      when abs(hematocrit_max-45.5) < abs(hematocrit_min-45.5)
	        then smin.hematocrit_score
	      -- values are equidistant - pick the larger score
	      when abs(hematocrit_max-45.5) = abs(hematocrit_max-45.5)
	      and  smax.hematocrit_score >= smin.hematocrit_score
	        then smax.hematocrit_score
	      when abs(hematocrit_max-45.5) = abs(hematocrit_max-45.5)
	      and  smax.hematocrit_score < smin.hematocrit_score
	        then smin.hematocrit_score
	    end as hematocrit_score

	  , case
	      when wbc_max is null then null
	      when abs(wbc_max-11.5) > abs(wbc_min-11.5)
	        then smax.wbc_score
	      when abs(wbc_max-11.5) < abs(wbc_min-11.5)
	        then smin.wbc_score
	      -- values are equidistant - pick the larger score
	      when abs(wbc_max-11.5) = abs(wbc_max-11.5)
	      and  smax.wbc_score >= smin.wbc_score
	        then smax.wbc_score
	      when abs(wbc_max-11.5) = abs(wbc_max-11.5)
	      and  smax.wbc_score < smin.wbc_score
	        then smin.wbc_score
	    end as wbc_score


	  -- For some labs, "furthest from normal" doesn't make sense
	  -- e.g. creatinine w/ ARF, the minimum could be 0.3, and the max 1.6
	  -- while the minimum of 0.3 is "further from 1", seems like the max should be scored

	  , case
	      when creatinine_max is null then null
	      -- if they have arf then use the max to score
	      when arf = 1 then smax.creatinine_score
	      -- otherwise furthest from 1
	      when abs(creatinine_max-1) > abs(creatinine_min-1)
	        then smax.creatinine_score
	      when abs(creatinine_max-1) < abs(creatinine_min-1)
	        then smin.creatinine_score
	      -- values are equidistant
	      when smax.creatinine_score >= smin.creatinine_score
	        then smax.creatinine_score
	      when smax.creatinine_score < smin.creatinine_score
	        then smin.creatinine_score
	    end as creatinine_score

	  -- the rule for BUN is the furthest from 0.. equivalent to the max value
	  , case
	      when bun_max is null then null
	      else smax.bun_score
	    end as bun_score

	  , case
	      when sodium_max is null then null
	      when abs(sodium_max-145.5) > abs(sodium_min-145.5)
	        then smax.sodium_score
	      when abs(sodium_max-145.5) < abs(sodium_min-145.5)
	        then smin.sodium_score
	      -- values are equidistant - pick the larger score
	      when abs(sodium_max-145.5) = abs(sodium_max-145.5)
	      and  smax.sodium_score >= smin.sodium_score
	        then smax.sodium_score
	      when abs(sodium_max-145.5) = abs(sodium_max-145.5)
	      and  smax.sodium_score < smin.sodium_score
	        then smin.sodium_score
	    end as sodium_score

	  , case
	      when albumin_max is null then null
	      when abs(albumin_max-3.5) > abs(albumin_min-3.5)
	        then smax.albumin_score
	      when abs(albumin_max-3.5) < abs(albumin_min-3.5)
	        then smin.albumin_score
	      -- values are equidistant - pick the larger score
	      when abs(albumin_max-3.5) = abs(albumin_max-3.5)
	      and  smax.albumin_score >= smin.albumin_score
	        then smax.albumin_score
	      when abs(albumin_max-3.5) = abs(albumin_max-3.5)
	      and  smax.albumin_score < smin.albumin_score
	        then smin.albumin_score
	    end as albumin_score

	  , case
	      when bilirubin_max is null then null
	      else smax.bilirubin_score
	    end as bilirubin_score

	  , case
	      when glucose_max is null then null
	      when abs(glucose_max-130) > abs(glucose_min-130)
	        then smax.glucose_score
	      when abs(glucose_max-130) < abs(glucose_min-130)
	        then smin.glucose_score
	      -- values are equidistant - pick the larger score
	      when abs(glucose_max-130) = abs(glucose_max-130)
	      and  smax.glucose_score >= smin.glucose_score
	        then smax.glucose_score
	      when abs(glucose_max-130) = abs(glucose_max-130)
	      and  smax.glucose_score < smin.glucose_score
	        then smin.glucose_score
	    end as glucose_score


	  -- Below are interactions/special cases where only 1 value is important
	  , case
	      when urineoutput is null then null
	      when urineoutput <   400 then 15
	      when urineoutput <   600 then 8
	      when urineoutput <   900 then 7
	      when urineoutput <  1500 then 5
	      when urineoutput <  2000 then 4
	      when urineoutput <  4000 then 0
	      when urineoutput >= 4000 then 1
	  end as uo_score

	  , case
	      when endotrachflag = 1
	        -- here they are intubated, so their verbal score is inappropriate
	        -- normally you are supposed to use "clinical judgement"
	        -- we don't have that, so we just assume normal (as was done in the original study)
	        then 0
	      when gcseyes = 1
	        then case
	          when gcsverbal = 1 and gcsmotor in (1,2)
	            then 48
	          when gcsverbal = 1 and gcsmotor in (3,4)
	            then 33
	          when gcsverbal = 1 and gcsmotor in (5,6)
	            then 16
	          when gcsverbal in (2,3) and gcsmotor in (1,2)
	            then 29
	          when gcsverbal in (2,3) and gcsmotor in (3,4)
	            then 24
	          when gcsverbal in (2,3) and gcsmotor >= 5
	            -- highly unlikely clinical combination
	            then null
	          when gcsverbal >= 4
	            then null
	          end
	      when gcseyes > 1
	        then case
	          when gcsverbal = 1 and gcsmotor in (1,2)
	            then 29
	          when gcsverbal = 1 and gcsmotor in (3,4)
	            then 24
	          when gcsverbal = 1 and gcsmotor in (5,6)
	            then 15
	          when gcsverbal in (2,3) and gcsmotor in (1,2)
	            then 29
	          when gcsverbal in (2,3) and gcsmotor in (3,4)
	            then 24
	          when gcsverbal in (2,3) and gcsmotor = 5
	            then 13
	          when gcsverbal in (2,3) and gcsmotor = 6
	            then 10
	          when gcsverbal = 4 and gcsmotor in (1,2,3,4)
	            then 13
	          when gcsverbal = 4 and gcsmotor = 5
	            then 8
	          when gcsverbal = 4 and gcsmotor = 6
	            then 3
	          when gcsverbal = 5 and gcsmotor in (1,2,3,4,5)
	            then 3
	          when gcsverbal = 5 and gcsmotor = 6
	            then 0
	          end
	      else null
	    end as gcs_score

	from cohort_second co
	left join score_min smin
	  on co.icustay_id = smin.icustay_id
	left join score_max smax
	  on co.icustay_id = smax.icustay_id
	)
	-- tabulate the APS III using the scores from the worst values
	, score_second as
	(
	  select s.*
	  -- coalesce statements impute normal score of zero if data element is missing
	  , coalesce(hr_score,0)
	  + coalesce(meanbp_score,0)
	  + coalesce(temp_score,0)
	  + coalesce(resprate_score,0)
	  + coalesce(hematocrit_score,0)
	  + coalesce(wbc_score,0)
	  + coalesce(creatinine_score,0)
	  + coalesce(uo_score,0)
	  + coalesce(bun_score,0)
	  + coalesce(sodium_score,0)
	  + coalesce(albumin_score,0)
	  + coalesce(bilirubin_score,0)
	  + coalesce(glucose_score,0)
	  + coalesce(acidbase_score,0)
	  + coalesce(gcs_score,0)
	    as APSIII
	  from scorecomp_second s
	),

	final_apsii_table_study as (
	select ie.subject_id, ie.hadm_id, ie.icustay_id
	, APSIII
	-- Calculate probability of hospital mortality using equation from Johnson 2014.
	, 1 / (1 + exp(- (-4.4360 + 0.04726*(APSIII) ))) as APSIII_PROB
	, hr_score
	, meanbp_score
	, temp_score
	, resprate_score
	, hematocrit_score
	, wbc_score
	, creatinine_score
	, uo_score
	, bun_score
	, sodium_score
	, albumin_score
	, bilirubin_score
	, glucose_score
	, acidbase_score
	, gcs_score
	from mimiciii.icustays ie
	left join score_second s
	  on ie.icustay_id = s.icustay_id
	order by ie.icustay_id),

	apsiii_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, FAP.APSIII as APSIII_SCORE
	from MIMICIII.ICUSTAYS ICU, final_apsii_table_study FAP
	where ICU.SUBJECT_ID = FAP.SUBJECT_ID and ICU.HADM_ID = FAP.HADM_ID and ICU.ICUSTAY_ID = FAP.ICUSTAY_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
		and FAP.APSIII is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, FAP.APSIII
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, FAP.APSIII),


-- Extracting ICUTYPE for all the patients in the ICU
	icu_type_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, ICU.FIRST_CAREUNIT as ICU_TYPE
	from MIMICIII.ICUSTAYS ICU
	where ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
		and ICU.FIRST_CAREUNIT is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, ICU.FIRST_CAREUNIT
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, ICU.FIRST_CAREUNIT),


-- Extracting RRT for all the patients in the ICU

	-- determines if patients received any dialysis during their stay

	-- Some example aggregate queries which summarize the data here..
	-- This query estimates 6.7% of ICU patients received RRT.
	    -- select count(rrt.icustay_id) as numobs
	    -- , sum(rrt) as numrrt
	    -- , sum(case when rrt=1 then 1 else 0 end)*100.0 / count(rrt.icustay_id)
	    -- as percent_rrt
	    -- from rrt
	    -- inner join icustays ie on rrt.icustay_id = ie.icustay_id
	    -- inner join patients p
	    -- on rrt.subject_id = p.subject_id
	    -- and p.dob < ie.intime - interval '1' year
	    -- inner join admissions adm
	    -- on rrt.hadm_id = adm.hadm_id;

	-- This query estimates that 4.6% of first ICU stays received RRT.
	    -- select
	    --   count(rrt.icustay_id) as numobs
	    --   , sum(rrt) as numrrt
	    --   , sum(case when rrt=1 then 1 else 0 end)*100.0 / count(rrt.icustay_id)
	    -- as percent_rrt
	    -- from
	    -- (
	    -- select ie.icustay_id, rrt.rrt
	    --   , ROW_NUMBER() over (partition by ie.subject_id order by ie.intime) rn
	    -- from rrt
	    -- inner join icustays ie
	    --   on rrt.icustay_id = ie.icustay_id
	    -- inner join patients p
	    --   on rrt.subject_id = p.subject_id
	    -- and p.dob < ie.intime - interval '1' year
	    -- inner join admissions adm
	    --   on rrt.hadm_id = adm.hadm_id
	    -- ) rrt
	    -- where rn = 1;

	cv as
	(
	  select ie.icustay_id
	    , max(
	        case
	          when ce.itemid in (152,148,149,146,147,151,150) and value is not null then 1
	          when ce.itemid in (229,235,241,247,253,259,265,271) and value = 'Dialysis Line' then 1
	          when ce.itemid = 582 and value in ('CAVH Start','CAVH D/C','CVVHD Start','CVVHD D/C','Hemodialysis st','Hemodialysis end') then 1
	        else 0 end
	        ) as RRT
	  from mimiciii.icustays ie
	  inner join mimiciii.chartevents ce
	    on ie.icustay_id = ce.icustay_id
	    and ce.itemid in
	    (
	       152 -- "Dialysis Type";61449
	      ,148 -- "Dialysis Access Site";60335
	      ,149 -- "Dialysis Access Type";60030
	      ,146 -- "Dialysate Flow ml/hr";57445
	      ,147 -- "Dialysate Infusing";56605
	      ,151 -- "Dialysis Site Appear";37345
	      ,150 -- "Dialysis Machine";27472
	      ,229 -- INV Line#1 [Type]
	      ,235 -- INV Line#2 [Type]
	      ,241 -- INV Line#3 [Type]
	      ,247 -- INV Line#4 [Type]
	      ,253 -- INV Line#5 [Type]
	      ,259 -- INV Line#6 [Type]
	      ,265 -- INV Line#7 [Type]
	      ,271 -- INV Line#8 [Type]
	      ,582 -- Procedures
	    )
	    and ce.value is not null
	  where ie.dbsource = 'carevue'
	  -- exclude rows marked as error
	  and ce.error IS DISTINCT FROM 1
	  group by ie.icustay_id
	)
	, mv_ce as
	(
	  select icustay_id
	    , 1 as RRT
	  from mimiciii.chartevents ce
	  where itemid in
	  (
	    -- Checkboxes
	      225126 -- | Dialysis patient                                  | Adm History/FHPA        | chartevents        | Checkbox
	    , 226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox
	    , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox
	    , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox
	    -- Numeric values
	    , 226499 -- | Hemodialysis Output                               | Dialysis                | chartevents        | Numeric
	    , 224154 -- | Dialysate Rate                                    | Dialysis                | chartevents        | Numeric
	    , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis                | chartevents        | Numeric
	    , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis                | chartevents        | Numeric
	    , 225183 -- | Current Goal                     | Dialysis | chartevents        | Numeric
	    , 227438 -- | Volume not removed               | Dialysis | chartevents        | Numeric
	    , 224191 -- | Hourly Patient Fluid Removal     | Dialysis | chartevents        | Numeric
	    , 225806 -- | Volume In (PD)                   | Dialysis | chartevents        | Numeric
	    , 225807 -- | Volume Out (PD)                  | Dialysis | chartevents        | Numeric
	    , 228004 -- | Citrate (ACD-A)                  | Dialysis | chartevents        | Numeric
	    , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis | chartevents        | Numeric
	    , 228006 -- | Post Filter Replacement Rate     | Dialysis | chartevents        | Numeric
	    , 224144 -- | Blood Flow (ml/min)              | Dialysis | chartevents        | Numeric
	    , 224145 -- | Heparin Dose (per hour)          | Dialysis | chartevents        | Numeric
	    , 224149 -- | Access Pressure                  | Dialysis | chartevents        | Numeric
	    , 224150 -- | Filter Pressure                  | Dialysis | chartevents        | Numeric
	    , 224151 -- | Effluent Pressure                | Dialysis | chartevents        | Numeric
	    , 224152 -- | Return Pressure                  | Dialysis | chartevents        | Numeric
	    , 224153 -- | Replacement Rate                 | Dialysis | chartevents        | Numeric
	    , 224404 -- | ART Lumen Volume                 | Dialysis | chartevents        | Numeric
	    , 224406 -- | VEN Lumen Volume                 | Dialysis | chartevents        | Numeric
	    , 226457 -- | Ultrafiltrate Output             | Dialysis | chartevents        | Numeric
	  )
	  and ce.valuenum > 0 -- also ensures it's not null
	  -- exclude rows marked as error
	  and ce.error IS DISTINCT FROM 1
	  group by icustay_id
	)
	, mv_ie as
	(
	  select icustay_id
	    , 1 as RRT
	  from mimiciii.inputevents_mv
	  where itemid in
	  (
	      227536 --	KCl (CRRT)	Medications	inputevents_mv	Solution
	    , 227525 --	Calcium Gluconate (CRRT)	Medications	inputevents_mv	Solution
	  )
	  and amount > 0 -- also ensures it's not null
	  group by icustay_id
	)
	, mv_de as
	(
	  select icustay_id
	    , 1 as RRT
	  from mimiciii.datetimeevents
	  where itemid in
	  (
	    -- TODO: unsure how to handle "Last dialysis"
	    --  225128 -- | Last dialysis                                     | Adm History/FHPA        | datetimeevents     | Date time
	      225318 -- | Dialysis Catheter Cap Change                      | Access Lines - Invasive | datetimeevents     | Date time
	    , 225319 -- | Dialysis Catheter Change over Wire Date           | Access Lines - Invasive | datetimeevents     | Date time
	    , 225321 -- | Dialysis Catheter Dressing Change                 | Access Lines - Invasive | datetimeevents     | Date time
	    , 225322 -- | Dialysis Catheter Insertion Date                  | Access Lines - Invasive | datetimeevents     | Date time
	    , 225324 -- | Dialysis CatheterTubing Change                    | Access Lines - Invasive | datetimeevents     | Date time
	  )
	  group by icustay_id
	)
	, mv_pe as
	(
	    select icustay_id
	      , 1 as RRT
	    from mimiciii.procedureevents_mv
	    where itemid in
	    (
	        225441 -- | Hemodialysis                                      | 4-Procedures            | procedureevents_mv | Process
	      , 225802 -- | Dialysis - CRRT                                   | Dialysis                | procedureevents_mv | Process
	      , 225803 -- | Dialysis - CVVHD                                  | Dialysis                | procedureevents_mv | Process
	      , 225805 -- | Peritoneal Dialysis                               | Dialysis                | procedureevents_mv | Process
	      , 224270 -- | Dialysis Catheter                                 | Access Lines - Invasive | procedureevents_mv | Process
	      , 225809 -- | Dialysis - CVVHDF                                 | Dialysis                | procedureevents_mv | Process
	      , 225955 -- | Dialysis - SCUF                                   | Dialysis                | procedureevents_mv | Process
	      , 225436 -- | CRRT Filter Change               | Dialysis | procedureevents_mv | Process
	    )
	    group by icustay_id
	),

	rrt_complete_final_table as (
	select ie.subject_id, ie.hadm_id, ie.icustay_id
	  , case
	      when cv.RRT = 1 then 1
	      when mv_ce.RRT = 1 then 1
	      when mv_ie.RRT = 1 then 1
	      when mv_de.RRT = 1 then 1
	      when mv_pe.RRT = 1 then 1
	      else 0
	    end as RRT
	from mimiciii.icustays ie
	left join cv
	  on ie.icustay_id = cv.icustay_id
	left join mv_ce
	  on ie.icustay_id = mv_ce.icustay_id
	left join mv_ie
	  on ie.icustay_id = mv_ie.icustay_id
	left join mv_de
	  on ie.icustay_id = mv_de.icustay_id
	left join mv_pe
	  on ie.icustay_id = mv_pe.icustay_id
	order by ie.icustay_id),

	rrt_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, RTF.RRT as RRT
	from MIMICIII.ICUSTAYS ICU, rrt_complete_final_table RTF
	where ICU.SUBJECT_ID = RTF.SUBJECT_ID and ICU.HADM_ID = RTF.HADM_ID and ICU.ICUSTAY_ID = RTF.ICUSTAY_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, RTF.RRT
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, RTF.RRT),


-- Extracting DNR for all the patients in the ICU

	-- This query extracts:
	--    i) a patient's first code status
	--    ii) a patient's last code status
	--    iii) the time of the first entry of DNR or CMO

	t1 as
	(
	  select icustay_id, charttime, value
	  -- use row number to identify first and last code status
	  , ROW_NUMBER() over (PARTITION BY icustay_id order by charttime) as rnFirst
	  , ROW_NUMBER() over (PARTITION BY icustay_id order by charttime) as rnLast

	  -- coalesce the values
	  , case
	      when value in ('Full Code','Full code') then 1
	    else 0 end as FullCode
	  , case
	      when value in ('Comfort Measures','Comfort measures only') then 1
	    else 0 end as CMO
	  , case
	      when value = 'CPR Not Indicate' then 1
	    else 0 end as DNCPR -- only in CareVue, i.e. only possible for ~60-70% of patients
	  , case
	      when value in ('Do Not Intubate','DNI (do not intubate)','DNR / DNI') then 1
	    else 0 end as DNI
	  , case
	      when value in ('Do Not Resuscita','DNR (do not resuscitate)','DNR / DNI') then 1
	    else 0 end as DNR
	  from mimiciii.chartevents
	  where itemid in (128, 223758)
	  and value is not null
	  and value != 'Other/Remarks'
	  -- exclude rows marked as error
	  AND error IS DISTINCT FROM 1
	)
	-- examine the discharge summaries to determine if they were ever made cmo
	, disch as
	(
	  select
	    ne.hadm_id
	    , max(case
	        when substring(substring(text from '[^E]CMO') from 2 for 3) = 'CMO'
	          then 1
	        else 0
	      end) as CMO
	    --
	    -- , case
	    --     when substring(text from '^[E]CMO') as CMO
	  from mimiciii.noteevents ne
	  where category = 'Discharge summary'
	  and text like '%CMO%'
	  group by hadm_id
	)
	-- examine the notes to determine if they were ever made cmo
	, nnote as
	(
	  select
	    hadm_id, charttime
	    , max(case
	        when substring(text from 'made CMO') != '' then 1
	        when substring(lower(text) from 'cmo ordered') != '' then 1
	        when substring(lower(text) from 'pt. is cmo') != '' then 1
	        when substring(text from 'Code status:([ \r\n]+)Comfort measures only') != '' then 1
	        --when substring(text from 'made CMO') != '' then 1
	        --when substring(substring(text from '[^E]CMO') from 2 for 3) = 'CMO'
	        --  then 1
	        else 0
	      end) as CMO
	  from mimiciii.noteevents ne
	  where category in ('Nursing/other','Nursing','Physician')
	  and lower(text) like '%cmo%'
	  group by hadm_id, charttime
	),

	dnr_final_complete_table as (
	select ie.subject_id, ie.hadm_id, ie.icustay_id
	  -- first recorded code status
	  , max(case when rnFirst = 1 then t1.FullCode else null end) as FullCode_first
	  , max(case when rnFirst = 1 then t1.CMO else null end) as CMO_first
	  , max(case when rnFirst = 1 then t1.DNR else null end) as DNR_first
	  , max(case when rnFirst = 1 then t1.DNI else null end) as DNI_first
	  , max(case when rnFirst = 1 then t1.DNCPR else null end) as DNCPR_first

	  -- last recorded code status
	  , max(case when  rnLast = 1 then t1.FullCode else null end) as FullCode_last
	  , max(case when  rnLast = 1 then t1.CMO else null end) as CMO_last
	  , max(case when  rnLast = 1 then t1.DNR else null end) as DNR_last
	  , max(case when  rnLast = 1 then t1.DNI else null end) as DNI_last
	  , max(case when  rnLast = 1 then t1.DNCPR else null end) as DNCPR_last

	  -- were they *at any time* given a certain code status
	  , max(t1.FullCode) as FullCode
	  , max(t1.CMO) as CMO
	  , max(t1.DNR) as DNR
	  , max(t1.DNI) as DNI
	  , max(t1.DNCPR) as DNCPR

	  -- discharge summary mentions CMO
	  -- *** not totally robust, the note could say "NOT CMO", which would be flagged as 1
	  , max(case when disch.cmo = 1 then 1 else 0 end) as CMO_ds

	  -- time until their first DNR
	  , min(case when t1.DNR = 1 then t1.charttime else null end)
	        as TimeDNR_chart

	  -- first code status of CMO
	  , min(case when t1.CMO = 1 then t1.charttime else null end)
	        as TimeCMO_chart
	  , min(case when t1.CMO = 1 then nn.charttime else null end)
	        as TimeCMO_NursingNote

	from mimiciii.icustays ie
	left join t1
	  on ie.icustay_id = t1.icustay_id
	left join nnote nn
	  on ie.hadm_id = nn.hadm_id and nn.charttime between ie.intime and ie.outtime
	left join disch
	  on ie.hadm_id = disch.hadm_id
	group by ie.subject_id, ie.hadm_id, ie.icustay_id, ie.intime),

	dnr_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, DNF.DNR_first as DNR_STATUS, DNF.DNR as DNR_ANY
	from MIMICIII.ICUSTAYS ICU, dnr_final_complete_table DNF
	where ICU.SUBJECT_ID = DNF.SUBJECT_ID and ICU.HADM_ID = DNF.HADM_ID and ICU.ICUSTAY_ID = DNF.ICUSTAY_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, DNF.DNR_first, DNF.DNR
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, DNF.DNR_first, DNF.DNR),

	cmo_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, DNF.CMO_first as CMO_STATUS, DNF.CMO as CMO_ANY 
	from MIMICIII.ICUSTAYS ICU, dnr_final_complete_table DNF
	where ICU.SUBJECT_ID = DNF.SUBJECT_ID and ICU.HADM_ID = DNF.HADM_ID and ICU.ICUSTAY_ID = DNF.ICUSTAY_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, DNF.CMO_first, DNF.CMO
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, DNF.CMO_first, DNF.CMO),


-- Extracting SOFA for all the patients in the ICU

  -- ------------------------------------------------------------------
  -- Title: Sequential Organ Failure Assessment (SOFA)
  -- This query extracts the sequential organ failure assessment (formally: sepsis-related organ failure assessment).
  -- This score is a measure of organ failure for patients in the ICU.
  -- The score is calculated on the first day of each ICU patients' stay.
  -- ------------------------------------------------------------------

  -- Reference for SOFA:
  --    Jean-Louis Vincent, Rui Moreno, Jukka Takala, Sheila Willatts, Arnaldo De Mendonça,
  --    Hajo Bruining, C. K. Reinhart, Peter M Suter, and L. G. Thijs.
  --    "The SOFA (Sepsis-related Organ Failure Assessment) score to describe organ dysfunction/failure."
  --    Intensive care medicine 22, no. 7 (1996): 707-710.

  -- Variables used in SOFA:
  --  GCS, MAP, FiO2, Ventilation status (sourced from CHARTEVENTS)
  --  Creatinine, Bilirubin, FiO2, PaO2, Platelets (sourced from LABEVENTS)
  --  Dobutamine, Epinephrine, Norepinephrine (sourced from INPUTEVENTS_MV and INPUTEVENTS_CV)
  --  Urine output (sourced from OUTPUTEVENTS)

  -- The following views required to run this query:
  --  1) uofirstday - generated by urine-output-first-day.sql
  --  2) ventfirstday - generated by ventilated-first-day.sql
  --  3) vitalsfirstday - generated by vitals-first-day.sql
  --  4) gcsfirstday - generated by gcs-first-day.sql
  --  5) labsfirstday - generated by labs-first-day.sql
  --  6) bloodgasfirstdayarterial - generated by blood-gas-first-day-arterial.sql
  --  7) echodata - generated by echo-data.sql
  --  8) ventdurations - generated by ventilation-durations.sql

  -- Note:
  --  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.
  --  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.

wt AS
  (
    SELECT ie.icustay_id
      -- ensure weight is measured in kg
      , avg(CASE
          WHEN itemid IN (762, 763, 3723, 3580, 226512)
            THEN valuenum
          -- convert lbs to kgs
          WHEN itemid IN (3581)
            THEN valuenum * 0.45359237
          WHEN itemid IN (3582)
            THEN valuenum * 0.0283495231
          ELSE null
        END) AS weight

    from mimiciii.icustays ie
    left join mimiciii.chartevents c
      on ie.icustay_id = c.icustay_id
    WHERE valuenum IS NOT NULL
    AND itemid IN
    (
      762, 763, 3723, 3580,                     -- Weight Kg
      3581,                                     -- Weight lb
      3582,                                     -- Weight oz
      226512 -- Metavision: Admission Weight (Kg)
    )
    AND valuenum != 0
    and charttime between ie.intime - interval '1' day and ie.intime + interval '1' day
    -- exclude rows marked as error
    AND c.error IS DISTINCT FROM 1
    group by ie.icustay_id
  )
  -- 5% of patients are missing a weight, but we can impute weight using their echo notes
  , echo2 as(
    select ie.icustay_id, avg(weight * 0.45359237) as weight
    from mimiciii.icustays ie
    left join echodata echo
      on ie.hadm_id = echo.hadm_id
      and echo.charttime > ie.intime - interval '7' day
      and echo.charttime < ie.intime + interval '1' day
    group by ie.icustay_id
  )
  , vaso_cv as
  (
    select ie.icustay_id
      -- case statement determining whether the ITEMID is an instance of vasopressor usage
      , max(case
              when itemid = 30047 then rate / coalesce(wt.weight,ec.weight) -- measured in mcgmin
              when itemid = 30120 then rate -- measured in mcgkgmin ** there are clear errors, perhaps actually mcgmin
              else null
            end) as rate_norepinephrine

      , max(case
              when itemid =  30044 then rate / coalesce(wt.weight,ec.weight) -- measured in mcgmin
              when itemid in (30119,30309) then rate -- measured in mcgkgmin
              else null
            end) as rate_epinephrine

      , max(case when itemid in (30043,30307) then rate end) as rate_dopamine
      , max(case when itemid in (30042,30306) then rate end) as rate_dobutamine

    from mimiciii.icustays ie
    inner join mimiciii.inputevents_cv cv
      on ie.icustay_id = cv.icustay_id and cv.charttime between ie.intime and ie.intime + interval '1' day
    left join wt
      on ie.icustay_id = wt.icustay_id
    left join echo2 ec
      on ie.icustay_id = ec.icustay_id
    where itemid in (30047,30120,30044,30119,30309,30043,30307,30042,30306)
    and rate is not null
    group by ie.icustay_id
  )
  , vaso_mv as
  (
    select ie.icustay_id
      -- case statement determining whether the ITEMID is an instance of vasopressor usage
      , max(case when itemid = 221906 then rate end) as rate_norepinephrine
      , max(case when itemid = 221289 then rate end) as rate_epinephrine
      , max(case when itemid = 221662 then rate end) as rate_dopamine
      , max(case when itemid = 221653 then rate end) as rate_dobutamine
    from mimiciii.icustays ie
    inner join mimiciii.inputevents_mv mv
      on ie.icustay_id = mv.icustay_id and mv.starttime between ie.intime and ie.intime + interval '1' day
    where itemid in (221906,221289,221662,221653)
    -- 'Rewritten' orders are not delivered to the patient
    and statusdescription != 'Rewritten'
    group by ie.icustay_id
  )
  , pafi1 as
  (
    -- join blood gas to ventilation durations to determine if patient was vent
    select bg.icustay_id, bg.charttime
    , case when vd.icustay_id is not null then 1 else 0 end as IsVent
    from bloodgasfirstday bg
    left join ventdurations vd
      on bg.icustay_id = vd.icustay_id
      and bg.charttime >= vd.starttime
      and bg.charttime <= vd.endtime
    order by bg.icustay_id, bg.charttime
  )
  , pafi2 as
  (
    -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score
    -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120
    -- in this case, the SOFA score is 3, *not* 4.
    select icustay_id
    from pafi1
    group by icustay_id
  )
  -- Aggregate the components for the score
  , scorecomp_second_v2 as
  (
  select ie.icustay_id
    , v.MeanBP_Min
    , coalesce(cv.rate_norepinephrine, mv.rate_norepinephrine) as rate_norepinephrine
    , coalesce(cv.rate_epinephrine, mv.rate_epinephrine) as rate_epinephrine
    , coalesce(cv.rate_dopamine, mv.rate_dopamine) as rate_dopamine
    , coalesce(cv.rate_dobutamine, mv.rate_dobutamine) as rate_dobutamine

    , l.Creatinine_Max
    , l.Bilirubin_Max
    , l.Platelet_Min
    , uo.UrineOutput

    , gcs.MinGCS
  from mimiciii.icustays ie
  left join vaso_cv cv
    on ie.icustay_id = cv.icustay_id
  left join vaso_mv mv
    on ie.icustay_id = mv.icustay_id
  left join pafi2 pf
   on ie.icustay_id = pf.icustay_id
  left join vitalsfirstday v
    on ie.icustay_id = v.icustay_id
  left join labsfirstday l
    on ie.icustay_id = l.icustay_id
  left join uofirstday uo
    on ie.icustay_id = uo.icustay_id
  left join gcsfirstday gcs
    on ie.icustay_id = gcs.icustay_id
  )
  , scorecalc as
  (
    -- Calculate the final score
    -- note that if the underlying data is missing, the component is null
    -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging
    select icustay_id

    -- Coagulation
    , case
        when platelet_min < 20  then 4
        when platelet_min < 50  then 3
        when platelet_min < 100 then 2
        when platelet_min < 150 then 1
        when platelet_min is null then null
        else 0
      end as coagulation

    -- Liver
    , case
        -- Bilirubin checks in mg/dL
          when Bilirubin_Max >= 12.0 then 4
          when Bilirubin_Max >= 6.0  then 3
          when Bilirubin_Max >= 2.0  then 2
          when Bilirubin_Max >= 1.2  then 1
          when Bilirubin_Max is null then null
          else 0
        end as liver

    -- Cardiovascular
    , case
        when rate_dopamine > 15 or rate_epinephrine >  0.1 or rate_norepinephrine >  0.1 then 4
        when rate_dopamine >  5 or rate_epinephrine <= 0.1 or rate_norepinephrine <= 0.1 then 3
        when rate_dopamine >  0 or rate_dobutamine > 0 then 2
        when MeanBP_Min < 70 then 1
        when coalesce(MeanBP_Min, rate_dopamine, rate_dobutamine, rate_epinephrine, rate_norepinephrine) is null then null
        else 0
      end as cardiovascular

    -- Neurological failure (GCS)
    , case
        when (MinGCS >= 13 and MinGCS <= 14) then 1
        when (MinGCS >= 10 and MinGCS <= 12) then 2
        when (MinGCS >=  6 and MinGCS <=  9) then 3
        when  MinGCS <   6 then 4
        when  MinGCS is null then null
    else 0 end
      as cns

    -- Renal failure - high creatinine or low urine output
    , case
      when (Creatinine_Max >= 5.0) then 4
      when  UrineOutput < 200 then 4
      when (Creatinine_Max >= 3.5 and Creatinine_Max < 5.0) then 3
      when  UrineOutput < 500 then 3
      when (Creatinine_Max >= 2.0 and Creatinine_Max < 3.5) then 2
      when (Creatinine_Max >= 1.2 and Creatinine_Max < 2.0) then 1
      when coalesce(UrineOutput, Creatinine_Max) is null then null
    else 0 end
      as renal
    from scorecomp_second_v2
  ),
  sofa_final_complete_table as (
  select ie.subject_id, ie.hadm_id, ie.icustay_id
    -- Combine all the scores to get SOFA
    -- Impute 0 if the score is missing
    , coalesce(coagulation,0)
    + coalesce(liver,0)
    + coalesce(cardiovascular,0)
    + coalesce(cns,0)
    + coalesce(renal,0)
    as SOFA
  , coagulation
  , liver
  , cardiovascular
  , cns
  , renal
  from mimiciii.icustays ie
  left join scorecalc s
    on ie.icustay_id = s.icustay_id
  order by ie.icustay_id),

  sofa_cohort AS (
  select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, SOF.SOFA as SOFA_SCORE
  from MIMICIII.ICUSTAYS ICU, sofa_final_complete_table SOF
  where ICU.SUBJECT_ID = SOF.SUBJECT_ID and ICU.HADM_ID = SOF.HADM_ID and ICU.ICUSTAY_ID = SOF.ICUSTAY_ID
    and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
    and SOF.SOFA is not NULL
  group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, SOF.SOFA
  order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, SOF.SOFA),


-- Extracting SAPS I for all the patients in the ICU

-- ------------------------------------------------------------------
-- Title: Simplified Acute Physiology Score (SAPS)
-- This query extracts the simplified acute physiology score.
-- This score is a measure of patient severity of illness.
-- The score is calculated on the first day of each ICU patients' stay.
-- ------------------------------------------------------------------

-- Reference for SAPS:
--    Jean-Roger Le Gall, Philippe Loirat, Annick Alperovitch, Paul Glaser, Claude Granthil,
--    Daniel Mathieu, Philippe Mercier, Remi Thomas, and Daniel Villers.
--    "A simplified acute physiology score for ICU patients."
--    Critical care medicine 12, no. 11 (1984): 975-977.

-- Variables used in SAPS:
--  Age, GCS
--  VITALS: Heart rate, systolic blood pressure, temperature, respiration rate
--  FLAGS: ventilation/cpap
--  IO: urine output
--  LABS: blood urea nitrogen, hematocrit, WBC, glucose, potassium, sodium, HCO3

-- The following views are required to run this query:
--  1) uofirstday - generated by urine-output-first-day.sql
--  2) ventfirstday - generated by ventilated-first-day.sql
--  3) vitalsfirstday - generated by vitals-first-day.sql
--  4) gcsfirstday - generated by gcs-first-day.sql
--  5) labsfirstday - generated by labs-first-day.sql

-- Note:
--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.
--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.

	cpap as
	(
	  select ie.icustay_id
	    , max(case when lower(value) similar to '%(cpap mask|bipap mask)%' then 1 else 0 end) as cpap
	  from mimiciii.icustays ie
	  inner join mimiciii.chartevents ce
	    on ie.icustay_id = ce.icustay_id
	    and ce.charttime between ie.intime and ie.intime + interval '1' day
	  where itemid in
	  (
	    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below
	    467, 469, 226732
	  )
	  and lower(ce.value) similar to '%(cpap mask|bipap mask)%'
	  -- exclude rows marked as error
	  AND ce.error IS DISTINCT FROM 1
	  group by ie.icustay_id
	)
	, cohort_saps as
	(
	select ie.subject_id, ie.hadm_id, ie.icustay_id
	      , ie.intime
	      , ie.outtime

	      -- the casts ensure the result is numeric.. we could equally extract EPOCH from the interval
	      -- however this code works in Oracle and Postgres
	      , round( ( cast(ie.intime as date) - cast(pat.dob as date) ) / 365.242 , 2 ) as age
	      , gcs.mingcs
	      , vital.heartrate_max
	      , vital.heartrate_min
	      , vital.sysbp_max
	      , vital.sysbp_min
	      , vital.resprate_max
	      , vital.resprate_min
	      , vital.tempc_max
	      , vital.tempc_min

	      , coalesce(vital.glucose_max, labs.glucose_max) as glucose_max
	      , coalesce(vital.glucose_min, labs.glucose_min) as glucose_min

	      , labs.bun_max
	      , labs.bun_min
	      , labs.hematocrit_max
	      , labs.hematocrit_min
	      , labs.wbc_max
	      , labs.wbc_min
	      , labs.sodium_max
	      , labs.sodium_min
	      , labs.potassium_max
	      , labs.potassium_min
	      , labs.bicarbonate_max
	      , labs.bicarbonate_min

	      , MechVent as mechvent
	      , uo.urineoutput

	      , cp.cpap

	from mimiciii.icustays ie
	inner join mimiciii.admissions adm
	  on ie.hadm_id = adm.hadm_id
	inner join mimiciii.patients pat
	  on ie.subject_id = pat.subject_id

	-- join to above view to get CPAP
	left join cpap cp
	  on ie.icustay_id = cp.icustay_id

	-- join to custom tables to get more data....
	left join gcsfirstday gcs
	  on ie.icustay_id = gcs.icustay_id
	left join vitalsfirstday vital
	  on ie.icustay_id = vital.icustay_id
	left join uofirstday uo
	  on ie.icustay_id = uo.icustay_id
	left join ventfirstday vent
	  on ie.icustay_id = vent.icustay_id
	left join labsfirstday labs
	  on ie.icustay_id = labs.icustay_id
	)
	, scorecomp_saps as
	(
	select
	  cohort_saps.*
	  -- Below code calculates the component scores needed for SAPS
	  , case
	      when age is null then null
	      when age <= 45 then 0
	      when age <= 55 then 1
	      when age <= 65 then 2
	      when age <= 75 then 3
	      when age >  75 then 4
	    end as age_score
	  , case
	      when heartrate_max is null then null
	      when heartrate_max >= 180 then 4
	      when heartrate_min < 40 then 4
	      when heartrate_max >= 140 then 3
	      when heartrate_min <= 54 then 3
	      when heartrate_max >= 110 then 2
	      when heartrate_min <= 69 then 2
	      when heartrate_max >= 70 and heartrate_max <= 109
	        and heartrate_min >= 70 and heartrate_min <= 109
	      then 0
	    end as hr_score
	  , case
	      when sysbp_min is null then null
	      when sysbp_max >= 190 then 4
	      when sysbp_min < 55 then 4
	      when sysbp_max >= 150 then 2
	      when sysbp_min <= 79 then 2
	      when sysbp_max >= 80 and sysbp_max <= 149
	        and sysbp_min >= 80 and sysbp_min <= 149
	        then 0
	    end as sysbp_score

	  , case
	      when tempc_max is null then null
	      when tempc_max >= 41.0 then 4
	      when tempc_min <  30.0 then 4
	      when tempc_max >= 39.0 then 3
	      when tempc_min <= 31.9  then 3
	      when tempc_min <= 33.9  then 2
	      when tempc_max >  38.4 then 1
	      when tempc_min <  36.0  then 1
	      when tempc_max >= 36.0 and tempc_max <= 38.4
	       and tempc_min >= 36.0 and tempc_min <= 38.4
	        then 0
	    end as temp_score

	  , case
	      when resprate_min is null then null
	      when resprate_max >= 50 then 4
	      when resprate_min <  6 then 4
	      when resprate_max >= 35 then 3
	      when resprate_min <= 9 then 2
	      when resprate_max >= 25 then 1
	      when resprate_min <= 11 then 1
	      when  resprate_max >= 12 and resprate_max <= 24
	        and resprate_min >= 12 and resprate_min <= 24
	          then 0
	      end as resp_score

	  , case
	      when coalesce(mechvent,cpap) is null then null
	      when cpap = 1 then 3
	      when mechvent = 1 then 3
	      else 0
	    end as vent_score

	  , case
	      when UrineOutput is null then null
	      when UrineOutput >  5000.0 then 2
	      when UrineOutput >= 3500.0 then 1
	      when UrineOutput >=  700.0 then 0
	      when UrineOutput >=  500.0 then 2
	      when UrineOutput >=  200.0 then 3
	      when UrineOutput <   200.0 then 4
	    end as uo_score

	  , case
	      when bun_max is null then null
	      when bun_max >= 55.0 then 4
	      when bun_max >= 36.0 then 3
	      when bun_max >= 29.0 then 2
	      when bun_max >= 7.50 then 1
	      when bun_min < 3.5 then 1
	      when  bun_max >= 3.5 and bun_max < 7.5
	        and bun_min >= 3.5 and bun_min < 7.5
	          then 0
	    end as bun_score

	  , case
	      when hematocrit_max is null then null
	      when hematocrit_max >= 60.0 then 4
	      when hematocrit_min <  20.0 then 4
	      when hematocrit_max >= 50.0 then 2
	      when hematocrit_min < 30.0 then 2
	      when hematocrit_max >= 46.0 then 1
	      when  hematocrit_max >= 30.0 and hematocrit_max < 46.0
	        and hematocrit_min >= 30.0 and hematocrit_min < 46.0
	          then 0
	      end as hematocrit_score

	  , case
	      when wbc_max is null then null
	      when wbc_max >= 40.0 then 4
	      when wbc_min <   1.0 then 4
	      when wbc_max >= 20.0 then 2
	      when wbc_min <   3.0 then 2
	      when wbc_max >= 15.0 then 1
	      when wbc_max >=  3.0 and wbc_max < 15.0
	       and wbc_min >=  3.0 and wbc_min < 15.0
	        then 0
	    end as wbc_score

	  , case
	      when glucose_max is null then null
	      when glucose_max >= 44.5 then 4
	      when glucose_min <   1.6 then 4
	      when glucose_max >= 27.8 then 3
	      when glucose_min <   2.8 then 3
	      when glucose_min <   3.9 then 2
	      when glucose_max >= 14.0 then 1
	      when glucose_max >=  3.9 and glucose_max < 14.0
	       and glucose_min >=  3.9 and glucose_min < 14.0
	        then 0
	      end as glucose_score

	  , case
	      when potassium_max is null then null
	      when potassium_max >= 7.0 then 4
	      when potassium_min <  2.5 then 4
	      when potassium_max >= 6.0 then 3
	      when potassium_min <  3.0 then 2
	      when potassium_max >= 5.5 then 1
	      when potassium_min <  3.5 then 1
	      when potassium_max >= 3.5 and potassium_max < 5.5
	       and potassium_min >= 3.5 and potassium_min < 5.5
	        then 0
	      end as potassium_score

	  , case
	      when sodium_max is null then null
	      when sodium_max >= 180 then 4
	      when sodium_min  < 110 then 4
	      when sodium_max >= 161 then 3
	      when sodium_min  < 120 then 3
	      when sodium_max >= 156 then 2
	      when sodium_min  < 130 then 2
	      when sodium_max >= 151 then 1
	      when sodium_max >= 130 and sodium_max < 151
	       and sodium_min >= 130 and sodium_min < 151
	        then 0
	      end as sodium_score

	  , case
	      when bicarbonate_max is null then null
	      when bicarbonate_min <   5.0 then 4
	      when bicarbonate_max >= 40.0 then 3
	      when bicarbonate_min <  10.0 then 3
	      when bicarbonate_max >= 30.0 then 1
	      when bicarbonate_min <  20.0 then 1
	      when bicarbonate_max >= 20.0 and bicarbonate_max < 30.0
	       and bicarbonate_min >= 20.0 and bicarbonate_min < 30.0
	          then 0
	      end as bicarbonate_score

	   , case
	      when mingcs is null then null
	        when mingcs <  3 then null -- erroneous value/on trach
	        when mingcs =  3 then 4
	        when mingcs <  7 then 3
	        when mingcs < 10 then 2
	        when mingcs < 13 then 1
	        when mingcs >= 13
	         and mingcs <= 15
	          then 0
	        end as gcs_score
	from cohort_saps
	),

  saps_cohort AS (
  select ie.subject_id, ie.hadm_id, ie.icustay_id
	-- coalesce statements impute normal score of zero if data element is missing
	, coalesce(age_score,0)
	+ coalesce(hr_score,0)
	+ coalesce(sysbp_score,0)
	+ coalesce(resp_score,0)
	+ coalesce(temp_score,0)
	+ coalesce(uo_score,0)
	+ coalesce(vent_score,0)
	+ coalesce(bun_score,0)
	+ coalesce(hematocrit_score,0)
	+ coalesce(wbc_score,0)
	+ coalesce(glucose_score,0)
	+ coalesce(potassium_score,0)
	+ coalesce(sodium_score,0)
	+ coalesce(bicarbonate_score,0)
	+ coalesce(gcs_score,0)
	  as SAPS
	, age_score
	, hr_score
	, sysbp_score
	, resp_score
	, temp_score
	, uo_score
	, vent_score
	, bun_score
	, hematocrit_score
	, wbc_score
	, glucose_score
	, potassium_score
	, sodium_score
	, bicarbonate_score
	, gcs_score

	from mimiciii.icustays ie
	left join scorecomp_saps s
	  on ie.icustay_id = s.icustay_id
	
  order by ie.icustay_id),

  saps_cohort_complete AS (
  select SUBJECT_ID, HADM_ID, ICUSTAY_ID, SAPS
  from saps_cohort
  group by SUBJECT_ID, HADM_ID, ICUSTAY_ID, SAPS
  order by SUBJECT_ID, HADM_ID, ICUSTAY_ID, SAPS),


-- Extracting MORTALITY for all the patients in the ICU
	mortality_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, extract(day from (PAT.DOD - ICU.INTIME)) as MORTALITY_ICU, extract(day from (PAT.DOD - ICU.OUTTIME)) as MORTALITY_ICU_TIME
	from MIMICIII.ICUSTAYS ICU, MIMICIII.PATIENTS PAT
	where ICU.SUBJECT_ID = PAT.SUBJECT_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
		and ICU.INTIME is not NULL and ICU.OUTTIME is not null and PAT.DOD is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, extract(day from (PAT.DOD - ICU.INTIME)), extract(day from (PAT.DOD - ICU.OUTTIME))
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, extract(day from (PAT.DOD - ICU.INTIME)), extract(day from (PAT.DOD - ICU.OUTTIME))),
	
	
-- Extracting LOS for all the patients in the ICU
	los_cohort AS (
	select ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, extract(day from (ICU.OUTTIME - ICU.INTIME)) + 1 as LOS_ICU_DAYS, extract(day from (ADM.DISCHTIME - ADM.ADMITTIME)) + 1 as LOS_HOS_DAYS
	from MIMICIII.ICUSTAYS ICU, MIMICIII.ADMISSIONS ADM
	where ICU.HADM_ID = ADM.HADM_ID
		and ICU.SUBJECT_ID is not NULL and ICU.HADM_ID is not NULL and ICU.ICUSTAY_ID is not NULL
		and ICU.OUTTIME is not NULL and ICU.OUTTIME is not NULL 
		and ADM.ADMITTIME is not NULL and ADM.DISCHTIME is not NULL
	group by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, extract(day from (ICU.OUTTIME - ICU.INTIME)), extract(day from (ADM.DISCHTIME - ADM.ADMITTIME))
	order by ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, extract(day from (ICU.OUTTIME - ICU.INTIME)), extract(day from (ADM.DISCHTIME - ADM.ADMITTIME))),

-- Extracting cancer specific information
	cancer_cohort AS (
	select CANCER.SUBJECT_ID, CANCER.HADM_ID
	, CASE
	   when icd9_code between '1400 ' and '1499 ' then 1 else 0
			end as ORALMAL /* Oral malignancies*/
	, CASE
	when icd9_code between '1500 ' and '1599 ' then 1 else 0
			end as GIMAL /* GI malignancy*/
	, CASE
	   when icd9_code between '1600 ' and '1659 ' then 1 else 0
			end as RESPMAL /* Respiratory malignancy*/
	, CASE
	   when icd9_code between '1700 ' and '1769 ' then 1
	   when icd9_code between '17300 ' and '17399 ' then 1 else 0
			end as CONNMAL /* Connective tissue malignancy and others*/
	, CASE
			when icd9_code like '179  ' then 1
	   when icd9_code between '1800 ' and '1899 ' then 1 else 0
			end as GUMAL /* genitourinary malignancy*/
	, CASE
	   when icd9_code between '1900 ' and '1992 ' then 1
	   when icd9_code between '20900 ' and '20936 ' then 1 else 0
			end as OTHERMAL /* Other malignancy*/
	, CASE
	  when icd9_code between '20000' and '20208' then 1
	  when icd9_code between '20270' and '20288' then 1 else 0
			end as TRUELYMPHOMA /* Lymphoma only */
	, CASE
	  when icd9_code between '20210' and '20268' then 1
	  when icd9_code between '20302' and '20382' then 1
	  when icd9_code between '20290' and '20302' then 1 else 0
			end as OTHERHEMMAL /* Other hematological mal */
	, CASE
	  when icd9_code between '20310' and '20892' then 1 else 0
			end as LEUKEMIA /* LEUKEMIA only */
	, CASE
	  when icd9_code between '1960 ' and '1991 ' then 1
	  when icd9_code between '20970' and '20975' then 1
	  when icd9_code = '20979' then 1
	  when icd9_code = '78951'         then 1 else 0
			end as METS      /* Metastatic cancer */
	, CASE
	  when icd9_code between '1400 ' and '1729 ' then 1
	  when icd9_code between '1740 ' and '1759 ' then 1
	  when icd9_code between '179  ' and '1958 ' then 1
	  when icd9_code between '20900' and '20924' then 1
	  when icd9_code between '20925' and '2093 ' then 1
	  when icd9_code between '20930' and '20936' then 1
	  when icd9_code between '25801' and '25803' then 1 else 0
			end as TUMOR     /* Solid tumor without metastasis */
from mimiciii.diagnoses_icd CANCER
group by CANCER.SUBJECT_ID, CANCER.HADM_ID, cancer.icd9_code
order by CANCER.SUBJECT_ID, CANCER.HADM_ID, cancer.icd9_code)


-- EXTRACTION OF THE DATASET FOR THE WHOLE MIMIC III

SELECT ICU.SUBJECT_ID, ICU.HADM_ID, ICU.ICUSTAY_ID, AGE_TABLE.age_admission as AGE_ADMISSION, GENDER_TABLE.GENDER as GENDER, 
	RACE_TABLE.RACE as RACE, RACE_TABLE.MARITAL_STATUS as MARITAL_STATUS, EMC.ELIXHAUSER_VANWALRAVEN AS ELIXHAUSER_VANWALRAVEN, 
	EMC.ELIXHAUSER_SID29 AS ELIXHAUSER_SID29, EMC.ELIXHAUSER_SID30 AS ELIXHAUSER_SID30, VASOPRESSORS_TABLE.DURATION_VASOPRESSORS_MINUTES, 
	VENTILATION_TABLE.DURATION_VENTILATION_MINUTES, OASIS_TABLE.OASIS_SCORE, APSIII_TABLE.APSIII_SCORE, ICUTYPE_TABLE.ICU_TYPE, 
	RRT_TABLE.RRT, DNR_TABLE.DNR_STATUS, DNR_TABLE.DNR_ANY, CMO_TABLE.CMO_STATUS, CMO_TABLE.CMO_ANY, SOFA_TABLE.SOFA_SCORE, SAPS_TABLE.SAPS, 
	MOR_TABLE.MORTALITY_ICU as MORTALITY, MOR_TABLE.MORTALITY_ICU_TIME as MORTALITY_TIME, LOS_TABLE.LOS_ICU_DAYS as LOS_ICU_DAYS, LOS_TABLE.LOS_HOS_DAYS as LOS_HOS_DAYS, 
	EMC.SOLID_TUMOR, EMC.METASTATIC_CANCER, EMC.LYMPHOMA,
	CANCER_TABLE.ORALMAL, CANCER_TABLE.GIMAL, CANCER_TABLE.RESPMAL, CANCER_TABLE.CONNMAL, CANCER_TABLE.GUMAL, CANCER_TABLE.OTHERMAL, 
  CANCER_TABLE.TRUELYMPHOMA, CANCER_TABLE.OTHERHEMMAL, CANCER_TABLE.LEUKEMIA, CANCER_TABLE.METS, CANCER_TABLE.TUMOR 
from study_cohort ICU
LEFT JOIN age_cohort AGE_TABLE
	ON AGE_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND AGE_TABLE.HADM_ID = ICU.HADM_ID
	AND AGE_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN gender_cohort GENDER_TABLE
	ON GENDER_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND GENDER_TABLE.HADM_ID = ICU.HADM_ID
	AND GENDER_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN race_cohort RACE_TABLE
	ON RACE_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND RACE_TABLE.HADM_ID = ICU.HADM_ID
	AND RACE_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN elixhauser_cohort EMC
	ON EMC.SUBJECT_ID = ICU.SUBJECT_ID
	AND EMC.HADM_ID = ICU.HADM_ID
	AND EMC.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN vasopressors_cohort VASOPRESSORS_TABLE
	ON VASOPRESSORS_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND VASOPRESSORS_TABLE.HADM_ID = ICU.HADM_ID
	AND VASOPRESSORS_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN ventilation_cohort VENTILATION_TABLE
	ON VENTILATION_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND VENTILATION_TABLE.HADM_ID = ICU.HADM_ID
	AND VENTILATION_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN oasis_cohort OASIS_TABLE
	ON OASIS_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND OASIS_TABLE.HADM_ID = ICU.HADM_ID
	AND OASIS_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN apsiii_cohort APSIII_TABLE
	ON APSIII_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND APSIII_TABLE.HADM_ID = ICU.HADM_ID
	AND APSIII_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN icu_type_cohort ICUTYPE_TABLE
	ON ICUTYPE_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND ICUTYPE_TABLE.HADM_ID = ICU.HADM_ID
	AND ICUTYPE_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN rrt_cohort RRT_TABLE
	ON RRT_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND RRT_TABLE.HADM_ID = ICU.HADM_ID
	AND RRT_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN dnr_cohort DNR_TABLE
	ON DNR_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND DNR_TABLE.HADM_ID = ICU.HADM_ID
	AND DNR_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN cmo_cohort CMO_TABLE
	ON CMO_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND CMO_TABLE.HADM_ID = ICU.HADM_ID
	AND CMO_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN mortality_cohort MOR_TABLE
	ON MOR_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND MOR_TABLE.HADM_ID = ICU.HADM_ID
	AND MOR_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN los_cohort LOS_TABLE
	ON LOS_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND LOS_TABLE.HADM_ID = ICU.HADM_ID
	AND LOS_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN sofa_cohort SOFA_TABLE
	ON SOFA_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND SOFA_TABLE.HADM_ID = ICU.HADM_ID
	AND SOFA_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN saps_cohort_complete SAPS_TABLE
	ON SAPS_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND SAPS_TABLE.HADM_ID = ICU.HADM_ID
	AND SAPS_TABLE.ICUSTAY_ID = ICU.ICUSTAY_ID
LEFT JOIN cancer_cohort CANCER_TABLE
	ON CANCER_TABLE.SUBJECT_ID = ICU.SUBJECT_ID
	AND CANCER_TABLE.HADM_ID = ICU.HADM_ID
) To '/Users/postgres/dataset_trend_cancer_clinical.txt' With DELIMITER AS '|';
